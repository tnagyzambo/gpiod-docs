<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacegpiod" kind="namespace" language="C++">
    <compoundname>gpiod</compoundname>
    <innerclass refid="classgpiod_1_1chip" prot="public">gpiod::chip</innerclass>
    <innerclass refid="classgpiod_1_1chip__iter" prot="public">gpiod::chip_iter</innerclass>
    <innerclass refid="classgpiod_1_1line" prot="public">gpiod::line</innerclass>
    <innerclass refid="classgpiod_1_1line__bulk" prot="public">gpiod::line_bulk</innerclass>
    <innerclass refid="structgpiod_1_1line__event" prot="public">gpiod::line_event</innerclass>
    <innerclass refid="classgpiod_1_1line__iter" prot="public">gpiod::line_iter</innerclass>
    <innerclass refid="structgpiod_1_1line__request" prot="public">gpiod::line_request</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gpiod__cxx_1ga0268cd18d174d440126fc70ee8940154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1line" kindref="compound">line</ref></type>
        <definition>GPIOD_API line gpiod::find_line</definition>
        <argsstring>(const ::std::string &amp;name)</argsstring>
        <name>find_line</name>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a GPIO line by name. </para>
        </briefdescription>
        <detaileddescription>
<para>Search all GPIO chips present on the system. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a line object - empty if the line was not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="541" column="16" declfile="bindings/cxx/gpiod.hpp" declline="541" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__gpiod__cxx_1ga650b67355eb3daf007d433baabbcd582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref></type>
        <definition>GPIOD_API chip_iter gpiod::make_chip_iter</definition>
        <argsstring>(void)</argsstring>
        <name>make_chip_iter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New chip iterator object pointing to the first GPIO chip on the system. </para>
</simplesect>
<simplesect kind="note"><para>This function is needed as we already use the default constructor of <ref refid="classgpiod_1_1chip__iter" kindref="compound">gpiod::chip_iter</ref> as the return value of gpiod::end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="854" column="21" declfile="bindings/cxx/gpiod.hpp" declline="854" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gpiod__cxx_1gaa0f3c5379006e6a7399fe55d55b07c18" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref></type>
        <definition>GPIOD_API chip_iter gpiod::begin</definition>
        <argsstring>(chip_iter iter) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref></type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Support for range-based loops for chip iterators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>A chip iterator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator unchanged. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="861" column="21" declfile="bindings/cxx/gpiod.hpp" declline="861" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gpiod__cxx_1gad94db03ce30d1406ebbf67627eddec51" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref></type>
        <definition>GPIOD_API chip_iter gpiod::end</definition>
        <argsstring>(const chip_iter &amp;iter) noexcept</argsstring>
        <name>end</name>
        <param>
          <type>const <ref refid="classgpiod_1_1chip__iter" kindref="compound">chip_iter</ref> &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Support for range-based loops for chip iterators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>A chip iterator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New end iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="868" column="21" declfile="bindings/cxx/gpiod.hpp" declline="868" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gpiod__cxx_1ga7476906c621292e20927c578e2681405" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1line__iter" kindref="compound">line_iter</ref></type>
        <definition>GPIOD_API line_iter gpiod::begin</definition>
        <argsstring>(line_iter iter) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classgpiod_1_1line__iter" kindref="compound">line_iter</ref></type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Support for range-based loops for line iterators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>A line iterator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator unchanged. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="962" column="21" declfile="bindings/cxx/gpiod.hpp" declline="962" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gpiod__cxx_1ga75265efe32b3555dde5a48eef179abe8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref> <ref refid="classgpiod_1_1line__iter" kindref="compound">line_iter</ref></type>
        <definition>GPIOD_API line_iter gpiod::end</definition>
        <argsstring>(const line_iter &amp;iter) noexcept</argsstring>
        <name>end</name>
        <param>
          <type>const <ref refid="classgpiod_1_1line__iter" kindref="compound">line_iter</ref> &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Support for range-based loops for line iterators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>A line iterator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New end iterator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bindings/cxx/gpiod.hpp" line="969" column="21" declfile="bindings/cxx/gpiod.hpp" declline="969" declcolumn="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="bindings/cxx/gpiod.hpp" line="18" column="15"/>
  </compounddef>
</doxygen>

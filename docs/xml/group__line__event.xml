<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__line__event" kind="group">
    <compoundname>line_event</compoundname>
    <title>Line events handling</title>
    <innerclass refid="structgpiod__line__event" prot="public">gpiod_line_event</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__line__event_1ga385c44f6fb256e5716a2302a5b940388" prot="public" static="no" strong="no">
        <type></type>
        <name>@10</name>
        <enumvalue id="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a73ce2babff38e852bbfeb262e645f4e8" prot="public">
          <name>GPIOD_LINE_EVENT_RISING_EDGE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Rising edge event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a81feb15310555531fdc8a04ccd2b37d9" prot="public">
          <name>GPIOD_LINE_EVENT_FALLING_EDGE</name>
          <briefdescription>
<para>Falling edge event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Event types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1473" column="6" bodyfile="include/gpiod.h" bodystart="1473" bodyend="1478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__line__event_1ga8bb899e6b5db351565fa747289dd3c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_wait</definition>
        <argsstring>(struct gpiod_line *line, const struct timespec *timeout) GPIOD_API</argsstring>
        <name>gpiod_line_event_wait</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for an event on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait time limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if wait timed out, -1 if an error occurred, 1 if an event occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1497" column="5" declfile="include/gpiod.h" declline="1497" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gaea68d5fd14d79fa1c4d7984b3ad657f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_wait_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const struct timespec *timeout, struct gpiod_line_bulk *event_bulk) GPIOD_API</argsstring>
        <name>gpiod_line_event_wait_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>event_bulk</declname>
        </param>
        <briefdescription>
<para>Wait for events on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait time limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Bulk object in which to store the line handles on which events occurred. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if wait timed out, -1 if an error occurred, 1 if at least one event occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1509" column="5" declfile="include/gpiod.h" declline="1509" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gad194091b545d85fbaf4e16e11a760548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read</definition>
        <argsstring>(struct gpiod_line *line, struct gpiod_line_event *event) GPIOD_API</argsstring>
        <name>gpiod_line_event_read</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Read next pending event from the GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the event was read correctly, -1 on error. </para>
</simplesect>
<simplesect kind="note"><para>This function will block if no event was queued for this line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1520" column="5" declfile="include/gpiod.h" declline="1520" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gae23c92b7c805dc5c9d99799e6072d610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_multiple</definition>
        <argsstring>(struct gpiod_line *line, struct gpiod_line_event *events, unsigned int num_events) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_multiple</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_events</declname>
        </param>
        <briefdescription>
<para>Read up to a certain number of events from the GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. Must hold at least the amount of events specified in num_events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how many events can be stored in the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the number of events stored in the buffer, on failure -1 is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1532" column="5" declfile="include/gpiod.h" declline="1532" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga2cace268d8c54adbe91bfbf4fdab84da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_get_fd</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_event_get_fd</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the event file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of the event file descriptor or -1 if the user tries to retrieve the descriptor from a line that wasn&apos;t configured for event monitoring.</para>
</simplesect>
Users may want to poll the event file descriptor on their own. This routine allows to access it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1546" column="5" declfile="include/gpiod.h" declline="1546" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga6a4d3fb6908da0f6a48feaaf7adf260f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_fd</definition>
        <argsstring>(int fd, struct gpiod_line_event *event) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_fd</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Read the last GPIO event directly from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which the event data will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the event was read correctly, -1 on error.</para>
</simplesect>
Users who directly poll the file descriptor for incoming events can also directly read the event data from it using this routine. This function translates the kernel representation of the event to the libgpiod format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1558" column="5" declfile="include/gpiod.h" declline="1558" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga89e92a8666092703217b9a87007e18d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_fd_multiple</definition>
        <argsstring>(int fd, struct gpiod_line_event *events, unsigned int num_events) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_fd_multiple</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_events</declname>
        </param>
        <briefdescription>
<para>Read up to a certain number of events directly from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. Must hold at least the amount of events specified in num_events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how many events can be stored in the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the number of events stored in the buffer, on failure -1 is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1569" column="5" declfile="include/gpiod.h" declline="1569" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Structures and functions allowing to poll lines for events and read them, both for individual lines as well as in bulk. Also contains functions for retrieving the associated file descriptors and operate on them for easy integration with standard unix interfaces. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="gpiod_8h" kind="file" language="C++">
    <compoundname>gpiod.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">time.h</includes>
    <includedby refid="gpiod_8hpp" local="no">gpiod.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>gpiod.h</label>
        <link refid="gpiod_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>gpiod.h</label>
        <link refid="gpiod_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gpiod.hpp</label>
        <link refid="gpiod_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structgpiod__ctxless__event__poll__fd" prot="public">gpiod_ctxless_event_poll_fd</innerclass>
    <innerclass refid="structgpiod__line__bulk" prot="public">gpiod_line_bulk</innerclass>
    <innerclass refid="structgpiod__line__request__config" prot="public">gpiod_line_request_config</innerclass>
    <innerclass refid="structgpiod__line__event" prot="public">gpiod_line_event</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__common_1ga21a3297091bbee8cd4829f8a681a085b" prot="public" static="no">
        <name>GPIOD_API</name>
        <initializer>__attribute__((visibility(&quot;default&quot;)))</initializer>
        <briefdescription>
<para>Makes symbol visible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="62" column="9" bodyfile="include/gpiod.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__common_1ga528b9a1ff19b8a79ad6fe30ee083759d" prot="public" static="no">
        <name>GPIOD_UNUSED</name>
        <initializer>__attribute__((unused))</initializer>
        <briefdescription>
<para>Marks a function argument or variable as potentially unused. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="67" column="9" bodyfile="include/gpiod.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__common_1gad1bb70753f220c105f0cef3174a060dc" prot="public" static="no">
        <name>GPIOD_BIT</name>
        <param><defname>nr</defname></param>
        <initializer>(1UL &lt;&lt; (nr))</initializer>
        <briefdescription>
<para>Shift 1 by given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nr</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit position. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 shifted by nr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="74" column="9" bodyfile="include/gpiod.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__common_1ga6f92d33a4d978d8f9d416b09643e21bb" prot="public" static="no">
        <name>GPIOD_DEPRECATED</name>
        <initializer>__attribute__((deprecated))</initializer>
        <briefdescription>
<para>Marks a public function as deprecated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="79" column="9" bodyfile="include/gpiod.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__line__bulk_1gad23c9460c53f7177af122ca06934074e" prot="public" static="no">
        <name>GPIOD_LINE_BULK_MAX_LINES</name>
        <initializer>64</initializer>
        <briefdescription>
<para>Maximum number of GPIO lines that can be requested at once. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="713" column="9" bodyfile="include/gpiod.h" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__line__bulk_1ga27acc32b17cade8b2c22831d41e7d48e" prot="public" static="no">
        <name>GPIOD_LINE_BULK_INITIALIZER</name>
        <initializer>{ { NULL }, 0 }</initializer>
        <briefdescription>
<para>Static initializer for GPIO bulk objects. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro simply sets the internally held number of lines to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="734" column="9" bodyfile="include/gpiod.h" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__line__bulk_1ga636ff9b980d5b02b31876ab909326b57" prot="public" static="no">
        <name>gpiod_line_bulk_foreach_line</name>
        <param><defname>bulk</defname></param>
        <param><defname>line</defname></param>
        <param><defname>lineptr</defname></param>
        <initializer>	for ((lineptr) = (bulk)-&gt;lines, (line) = *(lineptr);		\
	     (lineptr) &lt;= (bulk)-&gt;lines + ((bulk)-&gt;num_lines - 1);	\
	     (lineptr)++, (line) = *(lineptr))</initializer>
        <briefdescription>
<para>Iterate over all line handles held by a line bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line handle. On each iteration, the subsequent line handle is assigned to this pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lineptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GPIO line handle used to store the loop state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="788" column="9" bodyfile="include/gpiod.h" bodystart="788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__line__bulk_1ga464e833758432640ee9aa821715a84a4" prot="public" static="no">
        <name>gpiod_line_bulk_foreach_line_off</name>
        <param><defname>bulk</defname></param>
        <param><defname>line</defname></param>
        <param><defname>offset</defname></param>
        <initializer>	for ((offset) = 0, (line) = (bulk)-&gt;lines[0];			\
	     (offset) &lt; (bulk)-&gt;num_lines;				\
	     (offset)++, (line) = (bulk)-&gt;lines[(offset)])</initializer>
        <briefdescription>
<para>Iterate over all line handles held by a line bulk object (integer counter variant). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line handle. On each iteration, the subsequent line handle is assigned to this pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>An integer variable used to store the loop state.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This is a variant of <ref refid="group__line__bulk_1ga636ff9b980d5b02b31876ab909326b57" kindref="member">gpiod_line_bulk_foreach_line</ref> which uses an integer variable (either signed or unsigned) to store the loop state. This offset variable is guaranteed to correspond to the offset of the current line in the bulk-&gt;lines array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="806" column="9" bodyfile="include/gpiod.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterators_1ga9c4bd122b8972636d6c7645be3834f5c" prot="public" static="no">
        <name>gpiod_foreach_chip</name>
        <param><defname>iter</defname></param>
        <param><defname>chip</defname></param>
        <initializer>	for ((chip) = <ref refid="group__iterators_1gaa4d6dd096c1339842321b5575648e481" kindref="member">gpiod_chip_iter_next</ref>(iter);			\
	     (chip);							\
	     (chip) = <ref refid="group__iterators_1gaa4d6dd096c1339842321b5575648e481" kindref="member">gpiod_chip_iter_next</ref>(iter))</initializer>
        <briefdescription>
<para>Iterate over all GPIO chips present in the system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>An initialized GPIO chip iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GPIO chip handle. On each iteration the newly opened chip handle is assigned to this argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The user must not close the GPIO chip manually - instead the previous chip handle is closed automatically on the next iteration. The last chip to be opened is closed internally by <ref refid="group__iterators_1ga720e169dee0010a1894fb9dc20b869f5" kindref="member">gpiod_chip_iter_free</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1697" column="9" bodyfile="include/gpiod.h" bodystart="1697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterators_1gabcbe670583cfff4ca4b4ad7be2d25a3b" prot="public" static="no">
        <name>gpiod_foreach_chip_noclose</name>
        <param><defname>iter</defname></param>
        <param><defname>chip</defname></param>
        <initializer>	for ((chip) = <ref refid="group__iterators_1ga83b13414a8b156cf89a1a2f34c2d10f7" kindref="member">gpiod_chip_iter_next_noclose</ref>(iter);		\
	     (chip);							\
	     (chip) = <ref refid="group__iterators_1ga83b13414a8b156cf89a1a2f34c2d10f7" kindref="member">gpiod_chip_iter_next_noclose</ref>(iter))</initializer>
        <briefdescription>
<para>Iterate over all chips present in the system without closing them. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>An initialized GPIO chip iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GPIO chip handle. On each iteration the newly opened chip handle is assigned to this argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The user must close all the GPIO chips manually after use, until then, the chips remain open. Free the iterator by calling <ref refid="group__iterators_1ga1b03170f6ec33f360b0abf4aeaab9d22" kindref="member">gpiod_chip_iter_free_noclose</ref> to avoid closing the last chip automatically. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1712" column="9" bodyfile="include/gpiod.h" bodystart="1712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__iterators_1ga8e16c4290e83b780259896ac6cd1d886" prot="public" static="no">
        <name>gpiod_foreach_line</name>
        <param><defname>iter</defname></param>
        <param><defname>line</defname></param>
        <initializer>	for ((line) = <ref refid="group__iterators_1gaf8b739cfad846a4d28eb3cdb9d821b79" kindref="member">gpiod_line_iter_next</ref>(iter);			\
	     (line);							\
	     (line) = <ref refid="group__iterators_1gaf8b739cfad846a4d28eb3cdb9d821b79" kindref="member">gpiod_line_iter_next</ref>(iter))</initializer>
        <briefdescription>
<para>Iterate over all GPIO lines of a single chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>An initialized GPIO line iterator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a GPIO line handle - on each iteration, the next GPIO line will be assigned to this argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1747" column="9" bodyfile="include/gpiod.h" bodystart="1747" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__high__level_1ga06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bafeefd4fda9adc9dce302d360e94c6684" prot="public">
          <name>GPIOD_CTXLESS_FLAG_OPEN_DRAIN</name>
          <initializer>= GPIOD_BIT(0)</initializer>
          <briefdescription>
<para>The line is an open-drain port. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bad0aaf4c003c1458594d9ee51204e914e" prot="public">
          <name>GPIOD_CTXLESS_FLAG_OPEN_SOURCE</name>
          <initializer>= GPIOD_BIT(1)</initializer>
          <briefdescription>
<para>The line is an open-source port. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bac73a385a0bb0deb79a7cadcb8177c1e0" prot="public">
          <name>GPIOD_CTXLESS_FLAG_BIAS_DISABLE</name>
          <initializer>= GPIOD_BIT(2)</initializer>
          <briefdescription>
<para>The line has neither either pull-up nor pull-down resistor. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bacbaf6c53ae6216c3af22fe266e9b2f59" prot="public">
          <name>GPIOD_CTXLESS_FLAG_BIAS_PULL_DOWN</name>
          <initializer>= GPIOD_BIT(3)</initializer>
          <briefdescription>
<para>The line has pull-down resistor enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55ba18c4abd93567a7202cf97ccce57979ae" prot="public">
          <name>GPIOD_CTXLESS_FLAG_BIAS_PULL_UP</name>
          <initializer>= GPIOD_BIT(4)</initializer>
          <briefdescription>
<para>The line has pull-up resistor enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Miscellaneous GPIO flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="94" column="6" bodyfile="include/gpiod.h" bodystart="94" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__high__level_1gadf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no" strong="no">
        <type></type>
        <name>@1</name>
        <enumvalue id="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7a778f3f84088ef7e5921c7b4d1c0ebaf2" prot="public">
          <name>GPIOD_CTXLESS_EVENT_RISING_EDGE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Wait for rising edge events only. </para>
          </briefdescription>
          <detaileddescription>
<para>Wait for falling edge events only. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7ad30fcdabed63528589cc82492887879b" prot="public">
          <name>GPIOD_CTXLESS_EVENT_FALLING_EDGE</name>
          <briefdescription>
<para>Wait for both types of events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7aa132c539c94c8075f57178dee85627ac" prot="public">
          <name>GPIOD_CTXLESS_EVENT_BOTH_EDGES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Event types that the ctxless event monitor can wait for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="252" column="6" bodyfile="include/gpiod.h" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="enum" id="group__high__level_1ga99fb83031ce9923c84392b4e92f956b5" prot="public" static="no" strong="no">
        <type></type>
        <name>@2</name>
        <enumvalue id="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5abacf1972a00bbca59ae8b2cc85264d85" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_TIMEOUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Waiting for events timed out. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ae31b303018125a845a8b04ba1c550b6d" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_RISING_EDGE</name>
          <briefdescription>
<para>Rising edge event occured. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ac582a04e90467d92b9e10ab75d97b852" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_FALLING_EDGE</name>
          <briefdescription>
<para>Falling edge event occured. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Event types that can be passed to the ctxless event callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="264" column="6" bodyfile="include/gpiod.h" bodystart="264" bodyend="271"/>
      </memberdef>
      <memberdef kind="enum" id="group__high__level_1gabc6126af1d45847bc59afa0aa3216b04" prot="public" static="no" strong="no">
        <type></type>
        <name>@3</name>
        <enumvalue id="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1157cf8e5aa9668135f86f2623d4c8c5" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_RET_ERR</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Stop processing events and indicate an error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1b05ae970a4f54029b7173664f9ef309" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_RET_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Continue processing events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a5f2e5a705e18f1024d436dc60d967f06" prot="public">
          <name>GPIOD_CTXLESS_EVENT_CB_RET_STOP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Stop processing events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return status values that the ctxless event callback can return. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="276" column="6" bodyfile="include/gpiod.h" bodystart="276" bodyend="283"/>
      </memberdef>
      <memberdef kind="enum" id="group__high__level_1gadc29c2ff13d900c2f185ee95427fb06c" prot="public" static="no" strong="no">
        <type></type>
        <name>@4</name>
        <enumvalue id="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8116596864f4aa8edaa141c7f3600865" prot="public">
          <name>GPIOD_CTXLESS_EVENT_POLL_RET_STOP</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>The event loop should stop processing events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca97c074f23143888e9290411d0eccbdbc" prot="public">
          <name>GPIOD_CTXLESS_EVENT_POLL_RET_ERR</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>Polling error occurred (the polling function should set errno). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8b723031d2ee9c689463bbe2642bf1bb" prot="public">
          <name>GPIOD_CTXLESS_EVENT_POLL_RET_TIMEOUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Poll timed out. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return status values that the ctxless event poll callback can return. </para>
        </briefdescription>
        <detaileddescription>
<para>Positive value returned from the polling callback indicates the number of events that occurred on the set of monitored lines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="305" column="6" bodyfile="include/gpiod.h" bodystart="305" bodyend="312"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__info_1ga61dadd085c1777f559549e05962b2c9e" prot="public" static="no" strong="no">
        <type></type>
        <name>@5</name>
        <enumvalue id="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaea3029c9dbc0549f222260ed16f71d1e" prot="public">
          <name>GPIOD_LINE_DIRECTION_INPUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Direction is input - we&apos;re reading the state of a GPIO line. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaedcbd6e3c95ae844b1726d4dc3808d18" prot="public">
          <name>GPIOD_LINE_DIRECTION_OUTPUT</name>
          <briefdescription>
<para>Direction is output - we&apos;re driving the GPIO line. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible direction settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="824" column="6" bodyfile="include/gpiod.h" bodystart="824" bodyend="829"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__info_1ga726ca809ffd3d67ab4b8476646f26635" prot="public" static="no" strong="no">
        <type></type>
        <name>@6</name>
        <enumvalue id="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635abb89d1cb3a65b37b60fbcfef81661f9e" prot="public">
          <name>GPIOD_LINE_ACTIVE_STATE_HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The active state of a GPIO is active-high. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635a210bab3e0ab10c617a48a5fe37df83df" prot="public">
          <name>GPIOD_LINE_ACTIVE_STATE_LOW</name>
          <briefdescription>
<para>The active state of a GPIO is active-low. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible active state settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="834" column="6" bodyfile="include/gpiod.h" bodystart="834" bodyend="839"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__info_1ga0411cd49bb5b71852cecd93bcbf0ca2d" prot="public" static="no" strong="no">
        <type></type>
        <name>@7</name>
        <enumvalue id="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2daa793aeae9e54c9c91fb0b12dcc428096" prot="public">
          <name>GPIOD_LINE_BIAS_AS_IS</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The internal bias state is unknown. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dabb06ad1d6dbc13b02459b125dd692265" prot="public">
          <name>GPIOD_LINE_BIAS_DISABLE</name>
          <briefdescription>
<para>The internal bias is disabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dad3a3fcbb53c568bd3376da7c53ff2ff6" prot="public">
          <name>GPIOD_LINE_BIAS_PULL_UP</name>
          <briefdescription>
<para>The internal pull-up bias is enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dae4f9da6d78cdc9938947739b3b28b9df" prot="public">
          <name>GPIOD_LINE_BIAS_PULL_DOWN</name>
          <briefdescription>
<para>The internal pull-down bias is enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible internal bias settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="844" column="6" bodyfile="include/gpiod.h" bodystart="844" bodyend="853"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__request_1gabed82baf7f470b522273a3e37c24c600" prot="public" static="no" strong="no">
        <type></type>
        <name>@8</name>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a094a655c1b3896f7d8e078ee6cb461a9" prot="public">
          <name>GPIOD_LINE_REQUEST_DIRECTION_AS_IS</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Request the line(s), but don&apos;t change current direction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ad6e63a2afc02c0548d2c15e56f3f64ef" prot="public">
          <name>GPIOD_LINE_REQUEST_DIRECTION_INPUT</name>
          <briefdescription>
<para>Request the line(s) for reading the GPIO line state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a770c3cd9a587b812e00c5caab9b25961" prot="public">
          <name>GPIOD_LINE_REQUEST_DIRECTION_OUTPUT</name>
          <briefdescription>
<para>Request the line(s) for setting the GPIO line state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a2925bb25d0febefd20d45daccf14c96a" prot="public">
          <name>GPIOD_LINE_REQUEST_EVENT_FALLING_EDGE</name>
          <briefdescription>
<para>Only watch falling edge events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ac3e277e3622e41c7d805b156c2295534" prot="public">
          <name>GPIOD_LINE_REQUEST_EVENT_RISING_EDGE</name>
          <briefdescription>
<para>Only watch rising edge events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a3b168f7bbfa641443d21af25ccc7ca35" prot="public">
          <name>GPIOD_LINE_REQUEST_EVENT_BOTH_EDGES</name>
          <briefdescription>
<para>Monitor both types of events. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Available types of requests. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="972" column="6" bodyfile="include/gpiod.h" bodystart="972" bodyend="985"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__request_1gab04a0655cd1e3bcac5e8f48c18df1a57" prot="public" static="no" strong="no">
        <type></type>
        <name>@9</name>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57aaa6ac96d89df16453322e3ac6b8d74e7" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_OPEN_DRAIN</name>
          <initializer>= GPIOD_BIT(0)</initializer>
          <briefdescription>
<para>The line is an open-drain port. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ab54d1785699976cb9d3c74bdee53f6b3" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_OPEN_SOURCE</name>
          <initializer>= GPIOD_BIT(1)</initializer>
          <briefdescription>
<para>The line is an open-source port. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ac500ede3c4a86742def54b1113dbf436" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_ACTIVE_LOW</name>
          <initializer>= GPIOD_BIT(2)</initializer>
          <briefdescription>
<para>The active state of the line is low (high is the default). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a6e652d8761f2e7e4d7f9dd423e8c7195" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_BIAS_DISABLE</name>
          <initializer>= GPIOD_BIT(3)</initializer>
          <briefdescription>
<para>The line has neither either pull-up nor pull-down resistor. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ae945cc92de247a56afac968852c8360f" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_DOWN</name>
          <initializer>= GPIOD_BIT(4)</initializer>
          <briefdescription>
<para>The line has pull-down resistor enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a7e1cc39360b8e0a84f63ead0943aeee7" prot="public">
          <name>GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_UP</name>
          <initializer>= GPIOD_BIT(5)</initializer>
          <briefdescription>
<para>The line has pull-up resistor enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Miscellaneous GPIO request flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="990" column="6" bodyfile="include/gpiod.h" bodystart="990" bodyend="1003"/>
      </memberdef>
      <memberdef kind="enum" id="group__line__event_1ga385c44f6fb256e5716a2302a5b940388" prot="public" static="no" strong="no">
        <type></type>
        <name>@10</name>
        <enumvalue id="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a73ce2babff38e852bbfeb262e645f4e8" prot="public">
          <name>GPIOD_LINE_EVENT_RISING_EDGE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Rising edge event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a81feb15310555531fdc8a04ccd2b37d9" prot="public">
          <name>GPIOD_LINE_EVENT_FALLING_EDGE</name>
          <briefdescription>
<para>Falling edge event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Event types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1473" column="6" bodyfile="include/gpiod.h" bodystart="1473" bodyend="1478"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* gpiod_ctxless_set_value_cb) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>gpiod_ctxless_set_value_cb</name>
        <briefdescription>
<para>Simple set value callback signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="166" column="9" bodyfile="include/gpiod.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* gpiod_ctxless_event_handle_cb) (int, unsigned int, const struct timespec *, void *)</definition>
        <argsstring>)(int, unsigned int, const struct timespec *, void *)</argsstring>
        <name>gpiod_ctxless_event_handle_cb</name>
        <briefdescription>
<para>Simple event callback signature. </para>
        </briefdescription>
        <detaileddescription>
<para>The callback function takes the following arguments: event type (int), GPIO line offset (unsigned int), event timestamp (const struct timespec *) and a pointer to user data (void *).</para>
<para>This callback is called by the ctxless event loop functions for each GPIO event. If the callback returns <ref refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1157cf8e5aa9668135f86f2623d4c8c5" kindref="member">GPIOD_CTXLESS_EVENT_CB_RET_ERR</ref>, it should also set errno. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="296" column="9" bodyfile="include/gpiod.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* gpiod_ctxless_event_poll_cb) (unsigned int, struct gpiod_ctxless_event_poll_fd *, const struct timespec *, void *)</definition>
        <argsstring>)(unsigned int, struct gpiod_ctxless_event_poll_fd *, const struct timespec *, void *)</argsstring>
        <name>gpiod_ctxless_event_poll_cb</name>
        <briefdescription>
<para>Simple event poll callback signature. </para>
        </briefdescription>
        <detaileddescription>
<para>The poll callback function takes the following arguments: number of lines (unsigned int), an array of file descriptors on which input events should be monitored (struct <ref refid="structgpiod__ctxless__event__poll__fd" kindref="compound">gpiod_ctxless_event_poll_fd</ref> *), poll timeout (const struct timespec *) and a pointer to user data (void *).</para>
<para>The callback should poll for input events on the set of descriptors and return an appropriate value that can be interpreted by the event loop routine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="336" column="9" bodyfile="include/gpiod.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__high__level_1ga07eeae27ab2fdddbc88d3ac2fb56f2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_get_value</definition>
        <argsstring>(const char *device, unsigned int offset, bool active_low, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_ctxless_get_value</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Read current value from a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 (GPIO value) if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="115" column="5" declfile="include/gpiod.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gaceb6cafac03115019560b413f8c8a9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_get_value_ext</definition>
        <argsstring>(const char *device, unsigned int offset, bool active_low, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_get_value_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Read current value from a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 (GPIO value) if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="127" column="5" declfile="include/gpiod.h" declline="127" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga3462c2086e0424568dd98273e4aab1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_get_value_multiple</definition>
        <argsstring>(const char *device, const unsigned int *offsets, int *values, unsigned int num_lines, bool active_low, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_ctxless_get_value_multiple</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Read current values from a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines whose values should be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which the values will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines, must be &gt; 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of the lines - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="141" column="5" declfile="include/gpiod.h" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gac58f6bf700e80c203f0138e3de5c3c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_get_value_multiple_ext</definition>
        <argsstring>(const char *device, const unsigned int *offsets, int *values, unsigned int num_lines, bool active_low, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_get_value_multiple_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Read current values from a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines whose values should be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which the values will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines, must be &gt; 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="157" column="5" declfile="include/gpiod.h" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga37b28cb4485662d6915b7967689221e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_set_value</definition>
        <argsstring>(const char *device, unsigned int offset, int value, bool active_low, const char *consumer, gpiod_ctxless_set_value_cb cb, void *data) GPIOD_API</argsstring>
        <name>gpiod_ctxless_set_value</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set value of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback function that will be called right after setting the value. Users can use this, for example, to pause the execution after toggling a GPIO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional user data that will be passed to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="181" column="5" declfile="include/gpiod.h" declline="181" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gaf494539c8485191f7622b10684beb293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_set_value_ext</definition>
        <argsstring>(const char *device, unsigned int offset, int value, bool active_low, const char *consumer, gpiod_ctxless_set_value_cb cb, void *data, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_set_value_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set value of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback function that will be called right after setting the value. Users can use this, for example, to pause the execution after toggling a GPIO. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional user data that will be passed to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="200" column="5" declfile="include/gpiod.h" declline="200" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga4074f36d8e2e0a6895bd47ad9eac934f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_set_value_multiple</definition>
        <argsstring>(const char *device, const unsigned int *offsets, const int *values, unsigned int num_lines, bool active_low, const char *consumer, gpiod_ctxless_set_value_cb cb, void *data) GPIOD_API</argsstring>
        <name>gpiod_ctxless_set_value_multiple</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set values of multiple GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines the values of which should be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers containing new values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines, must be &gt; 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of the lines - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback function that will be called right after setting all values. Works the same as in <ref refid="group__high__level_1ga37b28cb4485662d6915b7967689221e0" kindref="member">gpiod_ctxless_set_value</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional user data that will be passed to the callback function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="219" column="5" declfile="include/gpiod.h" declline="219" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga0c80fa17889f341543041e0b970c41d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_set_value_multiple_ext</definition>
        <argsstring>(const char *device, const unsigned int *offsets, const int *values, unsigned int num_lines, bool active_low, const char *consumer, gpiod_ctxless_set_value_cb cb, void *data, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_set_value_multiple_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set values of multiple GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines the values of which should be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of integers containing new values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines, must be &gt; 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional callback function that will be called right after setting all values. Works the same as in <ref refid="group__high__level_1ga37b28cb4485662d6915b7967689221e0" kindref="member">gpiod_ctxless_set_value</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional user data that will be passed to the callback function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="240" column="5" declfile="include/gpiod.h" declline="240" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga1f69ff2efb6d7793deb97e3e70f695ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_loop</definition>
        <argsstring>(const char *device, unsigned int offset, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data) GPIOD_API GPIOD_DEPRECATED</argsstring>
        <name>gpiod_ctxless_event_loop</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Wait for events on a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line offset to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call for each line event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The way the ctxless event loop works is described in detail in <ref refid="group__high__level_1gaeba75a286f90fa851fc96b1c13869208" kindref="member">gpiod_ctxless_event_loop_multiple</ref> - this is just a wrapper aound this routine which calls it for a single GPIO line. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function suffers from an issue where HW may not allow setting up both rising and falling egde interrupts at the same time. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="358" column="5" declfile="include/gpiod.h" declline="358" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gaeba75a286f90fa851fc96b1c13869208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_loop_multiple</definition>
        <argsstring>(const char *device, const unsigned int *offsets, unsigned int num_lines, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data) GPIOD_API GPIOD_DEPRECATED</argsstring>
        <name>gpiod_ctxless_event_loop_multiple</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Wait for events on multiple GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of GPIO line offsets to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call on event occurrence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The poll callback can be NULL in which case the routine will fall back to a basic, ppoll() based callback. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function suffers from an issue where HW may not allow setting up both rising and falling egde interrupts at the same time.</para>
</xrefdescription></xrefsect></para>
<para>Internally this routine opens the GPIO chip, requests the set of lines for both-edges events and calls the polling callback in a loop. The role of the polling callback is to detect input events on a set of file descriptors and notify the caller about the fds ready for reading.</para>
<para>The ctxless event loop then reads each queued event from marked descriptors and calls the event callback. Both callbacks can stop the loop at any point.</para>
<para>The poll_cb argument can be NULL in which case the function falls back to a default, ppoll() based callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="396" column="5" declfile="include/gpiod.h" declline="396" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gaf9ee5da5b5d94cbc1de2d20549152899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_monitor</definition>
        <argsstring>(const char *device, int event_type, unsigned int offset, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data) GPIOD_API</argsstring>
        <name>gpiod_ctxless_event_monitor</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Wait for events on a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of events to listen for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line offset to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call for each line event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The way the ctxless event loop works is described in detail in <ref refid="group__high__level_1ga3ac28eb59bbd31b8b2298f76047d377d" kindref="member">gpiod_ctxless_event_monitor_multiple</ref> - this is just a wrapper aound this routine which calls it for a single GPIO line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="421" column="5" declfile="include/gpiod.h" declline="421" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga7f37ae7830c6cc5221d5c44657fa2a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_monitor_ext</definition>
        <argsstring>(const char *device, int event_type, unsigned int offset, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_event_monitor_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_type</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Wait for events on a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of events to listen for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line offset to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call for each line event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The way the ctxless event loop works is described in detail in <ref refid="group__high__level_1ga3ac28eb59bbd31b8b2298f76047d377d" kindref="member">gpiod_ctxless_event_monitor_multiple</ref> - this is just a wrapper aound this routine which calls it for a single GPIO line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="446" column="5" declfile="include/gpiod.h" declline="446" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1ga3ac28eb59bbd31b8b2298f76047d377d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_monitor_multiple</definition>
        <argsstring>(const char *device, int event_type, const unsigned int *offsets, unsigned int num_lines, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data) GPIOD_API</argsstring>
        <name>gpiod_ctxless_event_monitor_multiple</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_type</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Wait for events on multiple GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of events to listen for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of GPIO line offsets to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call on event occurrence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The poll callback can be NULL in which case the routine will fall back to a basic, ppoll() based callback.</para>
</simplesect>
Internally this routine opens the GPIO chip, requests the set of lines for the type of events specified in the event_type parameter and calls the polling callback in a loop. The role of the polling callback is to detect input events on a set of file descriptors and notify the caller about the fds ready for reading.</para>
<para>The ctxless event loop then reads each queued event from marked descriptors and calls the event callback. Both callbacks can stop the loop at any point.</para>
<para>The poll_cb argument can be NULL in which case the function falls back to a default, ppoll() based callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="484" column="5" declfile="include/gpiod.h" declline="484" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gaa6c77ae2b0bb3089a662674c4f46d209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_event_monitor_multiple_ext</definition>
        <argsstring>(const char *device, int event_type, const unsigned int *offsets, unsigned int num_lines, bool active_low, const char *consumer, const struct timespec *timeout, gpiod_ctxless_event_poll_cb poll_cb, gpiod_ctxless_event_handle_cb event_cb, void *data, int flags) GPIOD_API</argsstring>
        <name>gpiod_ctxless_event_monitor_multiple_ext</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_type</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_lines</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>active_low</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref></type>
          <declname>poll_cb</declname>
        </param>
        <param>
          <type><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref></type>
          <declname>event_cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Wait for events on multiple GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>Name, path, number or label of the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of events to listen for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of GPIO line offsets to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_lines</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active_low</parametername>
</parameternamelist>
<parameterdescription>
<para>The active state of this line - true if low. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum wait time for each iteration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poll_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call when waiting for events. Can be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to call on event occurrence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data passed to the callback. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 no errors were encountered, -1 if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The poll callback can be NULL in which case the routine will fall back to a basic, ppoll() based callback.</para>
</simplesect>
Internally this routine opens the GPIO chip, requests the set of lines for the type of events specified in the event_type parameter and calls the polling callback in a loop. The role of the polling callback is to detect input events on a set of file descriptors and notify the caller about the fds ready for reading.</para>
<para>The ctxless event loop then reads each queued event from marked descriptors and calls the event callback. Both callbacks can stop the loop at any point.</para>
<para>The poll_cb argument can be NULL in which case the function falls back to a default, ppoll() based callback. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="524" column="5" declfile="include/gpiod.h" declline="524" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__high__level_1gab046d9cc1cb930b20b17906846c014ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_ctxless_find_line</definition>
        <argsstring>(const char *name, char *chipname, size_t chipname_size, unsigned int *offset) GPIOD_API</argsstring>
        <name>gpiod_ctxless_find_line</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>chipname</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>chipname_size</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Determine the chip name and line offset of a line with given name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the GPIO line to lookup. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chipname</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which the name of the GPIO chip will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chipname_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the chip name buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an integer in which the line offset will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 on error, 0 if the line with given name doesn&apos;t exist and 1 if the line was found. In the first two cases the contents of chipname and offset remain unchanged. </para>
</simplesect>
<simplesect kind="note"><para>The chip name is truncated if the buffer can&apos;t hold its entire size. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO line names are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="548" column="5" declfile="include/gpiod.h" declline="548" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga1bd8b7231810364c711a14e85e9f3cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open</definition>
        <argsstring>(const char *path) GPIOD_API</argsstring>
        <name>gpiod_chip_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the gpiochip device file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="566" column="17" declfile="include/gpiod.h" declline="566" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga9007d4af540eb1ba9f00a837abf340e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_name</definition>
        <argsstring>(const char *name) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the gpiochip to open. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine appends name to &apos;/dev/&apos; to create the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="575" column="17" declfile="include/gpiod.h" declline="575" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga6b9dc5d5555b65d5dc262ca2e2623c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_number</definition>
        <argsstring>(unsigned int num) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_number</name>
        <param>
          <type>unsigned int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the gpiochip. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine appends num to &apos;/dev/gpiochip&apos; to create the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="584" column="17" declfile="include/gpiod.h" declline="584" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga3464baced5e398540d4ef7eb922c6a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_label</definition>
        <argsstring>(const char *label) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_label</name>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of the gpiochip to open. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if the chip with given label was not found or an error occured. </para>
</simplesect>
<simplesect kind="note"><para>If the chip cannot be found but no other error occurred, errno is set to ENOENT. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="594" column="17" declfile="include/gpiod.h" declline="594" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaebe2a3810fa09feb734c1395fdd13cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_lookup</definition>
        <argsstring>(const char *descr) GPIOD_API</argsstring>
        <name>gpiod_chip_open_lookup</name>
        <param>
          <type>const char *</type>
          <declname>descr</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip based on the best guess what the path is. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>String describing the gpiochip. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine tries to figure out whether the user passed it the path to the GPIO chip, its name, label or number as a string. Then it tries to open it using one of the gpiod_chip_open** variants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="605" column="17" declfile="include/gpiod.h" declline="605" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga3ca9ffa1f217f069651e055889453836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_chip_close</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_close</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Close a GPIO chip handle and release all allocated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="611" column="6" declfile="include/gpiod.h" declline="611" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga5f7f8de4c5b3439abc27071cab6eaace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_chip_name</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_name</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the GPIO chip name as represented in the kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a human-readable string containing the chip name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="618" column="12" declfile="include/gpiod.h" declline="618" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gafe9676334582b36a17cc045b3502301e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_chip_label</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_label</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the GPIO chip label as represented in the kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a human-readable string containing the chip label. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="625" column="12" declfile="include/gpiod.h" declline="625" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga6d468cf051fd763ed392661a0d0895eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int gpiod_chip_num_lines</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_num_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the number of GPIO lines exposed by this chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of GPIO lines. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="632" column="14" declfile="include/gpiod.h" declline="632" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaba9fe5b1cf0c33cd9d7ee911a9c2d4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_chip_get_line</definition>
        <argsstring>(struct gpiod_chip *chip, unsigned int offset) GPIOD_API</argsstring>
        <name>gpiod_chip_get_line</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Get the handle to the GPIO line at given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the GPIO line handle or NULL if an error occured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="641" column="1" declfile="include/gpiod.h" declline="641" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga699248d90cb511e3c1c77284eef74764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_get_lines</definition>
        <argsstring>(struct gpiod_chip *chip, unsigned int *offsets, unsigned int num_offsets, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_get_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_offsets</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Retrieve a set of lines and store them in a line bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which to store the line handles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="651" column="5" declfile="include/gpiod.h" declline="651" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gabc1d378805b73a93e62048bdbcb31fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_get_all_lines</definition>
        <argsstring>(struct gpiod_chip *chip, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_get_all_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Retrieve all lines exposed by a chip and store them in a bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which to store the line handles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="661" column="5" declfile="include/gpiod.h" declline="661" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga06c8df980b0218533b29ed2236909e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_chip_find_line</definition>
        <argsstring>(struct gpiod_chip *chip, const char *name) GPIOD_API</argsstring>
        <name>gpiod_chip_find_line</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a GPIO line by name among lines associated with given GPIO chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the GPIO line handle or NULL if the line could not be found or an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>In case a line with given name is not associated with given chip, the function sets errno to ENOENT. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO line names are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="677" column="1" declfile="include/gpiod.h" declline="677" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaf36b4461c1c85daf7df8fb34f574f78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_find_lines</definition>
        <argsstring>(struct gpiod_chip *chip, const char **names, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_find_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>names</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Find a set of GPIO lines by names among lines exposed by this chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to C-strings containing the names of the lines to lookup. Must end with a NULL-pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which the located lines will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all lines were located, -1 on error. </para>
</simplesect>
<simplesect kind="note"><para>If at least one line from the list could not be found among the lines exposed by this chip, the function sets errno to ENOENT. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO line names are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="692" column="5" declfile="include/gpiod.h" declline="692" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__bulk_1gacaedef36df4faba89e19f7dbfab5cfec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void gpiod_line_bulk_init</definition>
        <argsstring>(struct gpiod_line_bulk *bulk)</argsstring>
        <name>gpiod_line_bulk_init</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Initialize a GPIO bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This routine simply sets the internally held number of lines to 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="742" column="20" bodyfile="include/gpiod.h" bodystart="742" bodyend="745"/>
        <references refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" compoundref="gpiod_8h" startline="725">gpiod_line_bulk::num_lines</references>
      </memberdef>
      <memberdef kind="function" id="group__line__bulk_1gae22ad8a61865e85bf913eb9808aa82bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void gpiod_line_bulk_add</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, struct gpiod_line *line)</argsstring>
        <name>gpiod_line_bulk_add</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Add a single line to a GPIO bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Line to add. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="752" column="20" bodyfile="include/gpiod.h" bodystart="752" bodyend="756"/>
        <references refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" compoundref="gpiod_8h" startline="723">gpiod_line_bulk::lines</references>
        <references refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" compoundref="gpiod_8h" startline="725">gpiod_line_bulk::num_lines</references>
      </memberdef>
      <memberdef kind="function" id="group__line__bulk_1ga5d9bfd50ecc1ec1afbf71f3093a13a9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>static struct gpiod_line* gpiod_line_bulk_get_line</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, unsigned int offset)</argsstring>
        <name>gpiod_line_bulk_get_line</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Retrieve the line handle from a line bulk object at given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Line offset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Line handle at given offset. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="765" column="1" bodyfile="include/gpiod.h" bodystart="765" bodyend="768"/>
        <references refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" compoundref="gpiod_8h" startline="723">gpiod_line_bulk::lines</references>
      </memberdef>
      <memberdef kind="function" id="group__line__bulk_1ga32b3bcbf31f23f0f117435dd15312139" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int gpiod_line_bulk_num_lines</definition>
        <argsstring>(struct gpiod_line_bulk *bulk)</argsstring>
        <name>gpiod_line_bulk_num_lines</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Retrieve the number of GPIO lines held by this line bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of lines held by this line bulk. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="776" column="1" bodyfile="include/gpiod.h" bodystart="776" bodyend="779"/>
        <references refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" compoundref="gpiod_8h" startline="725">gpiod_line_bulk::num_lines</references>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga62168145c7008b82f2f4e0fa7e4b6677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int gpiod_line_offset</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_offset</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Line offset. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="860" column="14" declfile="include/gpiod.h" declline="860" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga0caffae9128ca8ce086bdace7706f822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_line_name</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_name</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the GPIO line as it is represented in the kernel. This routine returns a pointer to a null-terminated string or NULL if the line is unnamed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="869" column="12" declfile="include/gpiod.h" declline="869" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1gaa2112d86b1270515adf5023652957cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_line_consumer</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_consumer</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line consumer name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the GPIO consumer name as it is represented in the kernel. This routine returns a pointer to a null-terminated string or NULL if the line is not used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="878" column="12" declfile="include/gpiod.h" declline="878" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1gab577fd0d7138c1a82f585477ff2c0139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_direction</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_direction</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line direction setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns GPIOD_LINE_DIRECTION_INPUT or GPIOD_LINE_DIRECTION_OUTPUT. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="885" column="5" declfile="include/gpiod.h" declline="885" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1gabd3dae9b5178655d68310dd8652644fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_active_state</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_active_state</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line active state setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns GPIOD_LINE_ACTIVE_STATE_HIGH or GPIOD_LINE_ACTIVE_STATE_LOW. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="892" column="5" declfile="include/gpiod.h" declline="892" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1gaa95bdef39ae1abffc7dc41487123de28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_bias</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_bias</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read the GPIO line bias setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns GPIOD_LINE_BIAS_PULL_UP, GPIOD_LINE_BIAS_PULL_DOWN, GPIOD_LINE_BIAS_DISABLE or GPIOD_LINE_BIAS_AS_IS. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="900" column="5" declfile="include/gpiod.h" declline="900" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga38347386d5839a2dd7be7e499e1b0b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_is_used</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_is_used</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the line is currently in use. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the line is in use, false otherwise.</para>
</simplesect>
The user space can&apos;t know exactly why a line is busy. It may have been requested by another process or hogged by the kernel. It only matters that the line is used and we can&apos;t request it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="911" column="6" declfile="include/gpiod.h" declline="911" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga49501d4aa72d302748681ffd942895b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_is_open_drain</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_is_open_drain</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the line is an open-drain GPIO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the line is an open-drain GPIO, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="918" column="6" declfile="include/gpiod.h" declline="918" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga31d102da6befc8b579d7a2c05876b756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_is_open_source</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_is_open_source</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the line is an open-source GPIO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the line is an open-source GPIO, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="925" column="6" declfile="include/gpiod.h" declline="925" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1ga92863e269a94dc5faade05f5107e33cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_update</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_update</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Re-read the line info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
The line info is initially retrieved from the kernel by <ref refid="group__chips_1gaba9fe5b1cf0c33cd9d7ee911a9c2d4b1" kindref="member">gpiod_chip_get_line()</ref> and is later re-read after every successful request. Users can use this function to manually re-read the line info when needed.</para>
<para>We currently have no mechanism provided by the kernel for keeping the line info synchronized and for the sake of speed and simplicity of this low-level library we don&apos;t want to re-read the line info automatically everytime a property is retrieved. Any daemon using this library must track the state of lines on its own and call this routine if needed.</para>
<para>The state of requested lines is kept synchronized (or rather cannot be changed by external agents while the ownership of the line is taken) so there&apos;s no need to call this function in that case. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="947" column="5" declfile="include/gpiod.h" declline="947" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__info_1gade14511253e8d4d754fe8978607c459c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_needs_update</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API GPIOD_DEPRECATED</argsstring>
        <name>gpiod_line_needs_update</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the line info needs to be updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always returns false. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This mechanism no longer exists in the library and this function does nothing. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="957" column="1" declfile="include/gpiod.h" declline="957" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gad520fa1a0be91198cffc3d1141847964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request</definition>
        <argsstring>(struct gpiod_line *line, const struct gpiod_line_request_config *config, int default_val) GPIOD_API</argsstring>
        <name>gpiod_line_request</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const struct <ref refid="structgpiod__line__request__config" kindref="compound">gpiod_line_request_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
<para>Reserve a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Request options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line value - only relevant if we&apos;re setting the direction to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the line was properly reserved. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If this routine succeeds, the caller takes ownership of the GPIO line until it&apos;s released. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1029" column="5" declfile="include/gpiod.h" declline="1029" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gabe6226cb78226fe737eddf99d47eedc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_input</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_input</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Reserve a single line, set the direction to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the line was properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1039" column="5" declfile="include/gpiod.h" declline="1039" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga303bc402be82ed1bd95b7b72fd1d54fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_output</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int default_val) GPIOD_API</argsstring>
        <name>gpiod_line_request_output</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
<para>Reserve a single line, set the direction to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the line was properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1049" column="5" declfile="include/gpiod.h" declline="1049" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gadd60c323db0e3d492713d6032e155ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_rising_edge_events</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_rising_edge_events</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request rising edge event notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1058" column="5" declfile="include/gpiod.h" declline="1058" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gacf49fd94e99b1480db63ccefa38644d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_falling_edge_events</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_falling_edge_events</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request falling edge event notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1067" column="5" declfile="include/gpiod.h" declline="1067" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga2198ed36422b516d043bb2867621c6bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_both_edges_events</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_both_edges_events</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request all event type notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1076" column="5" declfile="include/gpiod.h" declline="1076" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gaa4dd1a15015b42fef6266eb42a4ec2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_input_flags</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_input_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Reserve a single line, set the direction to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the line was properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1086" column="5" declfile="include/gpiod.h" declline="1086" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gaf74984a0b6dddf742a616ae20e304712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_output_flags</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int flags, int default_val) GPIOD_API</argsstring>
        <name>gpiod_line_request_output_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
<para>Reserve a single line, set the direction to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the line was properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1097" column="5" declfile="include/gpiod.h" declline="1097" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gab0002ac08695fd38d7e8f7a14dad34f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_rising_edge_events_flags</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_rising_edge_events_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request rising edge event notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1108" column="5" declfile="include/gpiod.h" declline="1108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga9261dbe13e0cf6f36cee7bf7f2e9f23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_falling_edge_events_flags</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_falling_edge_events_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request falling edge event notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1119" column="5" declfile="include/gpiod.h" declline="1119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gaefec58ef5c34cdc6c0cbdefc9b5541b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_both_edges_events_flags</definition>
        <argsstring>(struct gpiod_line *line, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_both_edges_events_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request all event type notifications on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1130" column="5" declfile="include/gpiod.h" declline="1130" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gac2e36e722e5c15c10fc7f6edf948f1c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const struct gpiod_line_request_config *config, const int *default_vals) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const struct <ref refid="structgpiod__line__request__config" kindref="compound">gpiod_line_request_config</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>default_vals</declname>
        </param>
        <briefdescription>
<para>Reserve a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Request options. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line values - only relevant if we&apos;re setting the direction to output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the all lines were properly requested. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If this routine succeeds, the caller takes ownership of the GPIO lines until they&apos;re released. All the requested lines must be prodivided by the same gpiochip. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1147" column="5" declfile="include/gpiod.h" declline="1147" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gafd0c43ab707e74b749ea971b0725eb95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_input</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_input</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Reserve a set of GPIO lines, set the direction to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the lines were properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1157" column="5" declfile="include/gpiod.h" declline="1157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga42d84b2db88f1d1facee58d615d3bb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_output</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, const int *default_vals) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_output</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>default_vals</declname>
        </param>
        <briefdescription>
<para>Reserve a set of GPIO lines, set the direction to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the lines were properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1167" column="5" declfile="include/gpiod.h" declline="1167" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga948e2a0627bfce92536dd9c78fdf88c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_rising_edge_events</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_rising_edge_events</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request rising edge event notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1177" column="5" declfile="include/gpiod.h" declline="1177" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga6eac4ea5e415b15d0da13c5110fa7266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_falling_edge_events</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_falling_edge_events</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request falling edge event notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1186" column="5" declfile="include/gpiod.h" declline="1186" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga72788c2e2cf7a631108aec97ee41c1d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_both_edges_events</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_both_edges_events</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <briefdescription>
<para>Request all event type notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1195" column="5" declfile="include/gpiod.h" declline="1195" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga8e424335311ebdf9a4f23a4009ca3192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_input_flags</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_input_flags</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Reserve a set of GPIO lines, set the direction to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the lines were properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1205" column="5" declfile="include/gpiod.h" declline="1205" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga13b212c9280d4919c697aefa838bcd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_output_flags</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, int flags, const int *default_vals) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_output_flags</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>default_vals</declname>
        </param>
        <briefdescription>
<para>Reserve a set of GPIO lines, set the direction to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial line values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the lines were properly reserved, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1217" column="5" declfile="include/gpiod.h" declline="1217" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gae28e15c99a883d29f97a42c75a099028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_rising_edge_events_flags</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_rising_edge_events_flags</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request rising edge event notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1228" column="5" declfile="include/gpiod.h" declline="1228" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga6c82948bab539c2448c08f265fbd62c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_falling_edge_events_flags</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_falling_edge_events_flags</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request falling edge event notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1240" column="5" declfile="include/gpiod.h" declline="1240" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga767334183c16c4ef5b96be5c96d293a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_request_bulk_both_edges_events_flags</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const char *consumer, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_request_bulk_both_edges_events_flags</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Request all event type notifications on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to request. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>consumer</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the consumer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the operation succeeds, -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1252" column="5" declfile="include/gpiod.h" declline="1252" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga129d28476be19cd8fc75455ea80f5ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_line_release</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_release</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Release a previously reserved line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1261" column="6" declfile="include/gpiod.h" declline="1261" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga3c224e8b98157d643967150f394273a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_line_release_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_line_release_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Release a set of previously reserved lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to release.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1270" column="6" declfile="include/gpiod.h" declline="1270" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1ga29a5c43302b6bd678124ad0f06f12c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_is_requested</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_is_requested</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the calling user has ownership of this line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if given line was requested, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1277" column="6" declfile="include/gpiod.h" declline="1277" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__request_1gad1c150d92f1ba4f5308083218912969f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpiod_line_is_free</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_is_free</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Check if the calling user has neither requested ownership of this line nor configured any event notifications. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if given line is free, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1285" column="6" declfile="include/gpiod.h" declline="1285" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__value_1ga44d7e450cc35e92bd4c85b167ca82b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_get_value</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_get_value</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Read current value of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 or 1 if the operation succeeds. On error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1303" column="5" declfile="include/gpiod.h" declline="1303" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__value_1ga86ac3339c87991469bbbaa6e3d63f38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_get_value_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, int *values) GPIOD_API</argsstring>
        <name>gpiod_line_get_value_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Read current values of a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>An array big enough to hold line_bulk-&gt;num_lines values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If succeeds, this routine fills the values array with a set of values in the same order, the lines are added to line_bulk. If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1316" column="5" declfile="include/gpiod.h" declline="1316" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__value_1ga3b9ba90f0f451361657923db0c0a7f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_value</definition>
        <argsstring>(struct gpiod_line *line, int value) GPIOD_API</argsstring>
        <name>gpiod_line_set_value</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1326" column="5" declfile="include/gpiod.h" declline="1326" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__value_1ga9307efacdc06f27cc668831421f86acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_value_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const int *values) GPIOD_API</argsstring>
        <name>gpiod_line_set_value_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Set the values of a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to reserve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>An array holding line_bulk-&gt;num_lines new values for lines. A NULL pointer is interpreted as a logical low for all lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1339" column="5" declfile="include/gpiod.h" declline="1339" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga0fb77dc1a7df831a7d0ab74c04bffdc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_config</definition>
        <argsstring>(struct gpiod_line *line, int direction, int flags, int value) GPIOD_API</argsstring>
        <name>gpiod_line_set_config</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Update the configuration of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated direction which may be one of GPIOD_LINE_REQUEST_DIRECTION_AS_IS, GPIOD_LINE_REQUEST_DIRECTION_INPUT, or GPIOD_LINE_REQUEST_DIRECTION_OUTPUT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new output value for the line when direction is GPIOD_LINE_REQUEST_DIRECTION_OUTPUT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1365" column="5" declfile="include/gpiod.h" declline="1365" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga78a83d1d4a7f040c28783ed91838760d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_config_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, int direction, int flags, const int *values) GPIOD_API</argsstring>
        <name>gpiod_line_set_config_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Update the configuration of a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Updated direction which may be one of GPIOD_LINE_REQUEST_DIRECTION_AS_IS, GPIOD_LINE_REQUEST_DIRECTION_INPUT, or GPIOD_LINE_REQUEST_DIRECTION_OUTPUT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>An array holding line_bulk-&gt;num_lines new logical values for lines when direction is GPIOD_LINE_REQUEST_DIRECTION_OUTPUT. A NULL pointer is interpreted as a logical low for all lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1386" column="5" declfile="include/gpiod.h" declline="1386" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga4c77815fce3cc4bafc411aed440a27e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_flags</definition>
        <argsstring>(struct gpiod_line *line, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_set_flags</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Update the configuration flags of a single GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1398" column="5" declfile="include/gpiod.h" declline="1398" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga4a96c8fd658f0a7c6087879f5ac25ba5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_flags_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, int flags) GPIOD_API</argsstring>
        <name>gpiod_line_set_flags_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Update the configuration flags of a set of GPIO lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Replacement flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1410" column="5" declfile="include/gpiod.h" declline="1410" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga4f4d6e13f844bbea19cdc58d81f2c6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_direction_input</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_set_direction_input</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Set the direction of a single GPIO line to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1419" column="5" declfile="include/gpiod.h" declline="1419" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga178050b4b13ae2ce3c42a5cfe35c0795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_direction_input_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_line_set_direction_input_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Set the direction of a set of GPIO lines to input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1431" column="1" declfile="include/gpiod.h" declline="1431" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1gacb95c52a6d6e64e1c7ec37191021df9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_direction_output</definition>
        <argsstring>(struct gpiod_line *line, int value) GPIOD_API</argsstring>
        <name>gpiod_line_set_direction_output</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the direction of a single GPIO line to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The logical value output on the line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1440" column="5" declfile="include/gpiod.h" declline="1440" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__config_1ga880940f1f8f418f4dde48a20cc581af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_set_direction_output_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const int *values) GPIOD_API</argsstring>
        <name>gpiod_line_set_direction_output_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Set the direction of a set of GPIO lines to output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>An array holding line_bulk-&gt;num_lines new logical values for lines. A NULL pointer is interpreted as a logical low for all lines. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 is the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</para>
</simplesect>
If the lines were not previously requested together, the behavior is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1455" column="5" declfile="include/gpiod.h" declline="1455" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga8bb899e6b5db351565fa747289dd3c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_wait</definition>
        <argsstring>(struct gpiod_line *line, const struct timespec *timeout) GPIOD_API</argsstring>
        <name>gpiod_line_event_wait</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for an event on a single line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait time limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if wait timed out, -1 if an error occurred, 1 if an event occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1497" column="5" declfile="include/gpiod.h" declline="1497" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gaea68d5fd14d79fa1c4d7984b3ad657f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_wait_bulk</definition>
        <argsstring>(struct gpiod_line_bulk *bulk, const struct timespec *timeout, struct gpiod_line_bulk *event_bulk) GPIOD_API</argsstring>
        <name>gpiod_line_event_wait_bulk</name>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>event_bulk</declname>
        </param>
        <briefdescription>
<para>Wait for events on a set of lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of GPIO lines to monitor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Wait time limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Bulk object in which to store the line handles on which events occurred. Can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if wait timed out, -1 if an error occurred, 1 if at least one event occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1509" column="5" declfile="include/gpiod.h" declline="1509" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gad194091b545d85fbaf4e16e11a760548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read</definition>
        <argsstring>(struct gpiod_line *line, struct gpiod_line_event *event) GPIOD_API</argsstring>
        <name>gpiod_line_event_read</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Read next pending event from the GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the event was read correctly, -1 on error. </para>
</simplesect>
<simplesect kind="note"><para>This function will block if no event was queued for this line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1520" column="5" declfile="include/gpiod.h" declline="1520" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1gae23c92b7c805dc5c9d99799e6072d610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_multiple</definition>
        <argsstring>(struct gpiod_line *line, struct gpiod_line_event *events, unsigned int num_events) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_multiple</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_events</declname>
        </param>
        <briefdescription>
<para>Read up to a certain number of events from the GPIO line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. Must hold at least the amount of events specified in num_events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how many events can be stored in the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the number of events stored in the buffer, on failure -1 is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1532" column="5" declfile="include/gpiod.h" declline="1532" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga2cace268d8c54adbe91bfbf4fdab84da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_get_fd</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_event_get_fd</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the event file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of the event file descriptor or -1 if the user tries to retrieve the descriptor from a line that wasn&apos;t configured for event monitoring.</para>
</simplesect>
Users may want to poll the event file descriptor on their own. This routine allows to access it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1546" column="5" declfile="include/gpiod.h" declline="1546" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga6a4d3fb6908da0f6a48feaaf7adf260f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_fd</definition>
        <argsstring>(int fd, struct gpiod_line_event *event) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_fd</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Read the last GPIO event directly from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer in which the event data will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the event was read correctly, -1 on error.</para>
</simplesect>
Users who directly poll the file descriptor for incoming events can also directly read the event data from it using this routine. This function translates the kernel representation of the event to the libgpiod format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1558" column="5" declfile="include/gpiod.h" declline="1558" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__event_1ga89e92a8666092703217b9a87007e18d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_line_event_read_fd_multiple</definition>
        <argsstring>(int fd, struct gpiod_line_event *events, unsigned int num_events) GPIOD_API</argsstring>
        <name>gpiod_line_event_read_fd_multiple</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref> *</type>
          <declname>events</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_events</declname>
        </param>
        <briefdescription>
<para>Read up to a certain number of events directly from a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>events</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which the event data will be copied. Must hold at least the amount of events specified in num_events. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_events</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how many events can be stored in the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the number of events stored in the buffer, on failure -1 is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1569" column="5" declfile="include/gpiod.h" declline="1569" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__line__misc_1ga3317ddc4f587d46ba45bb2b5800914c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_line_get</definition>
        <argsstring>(const char *device, unsigned int offset) GPIOD_API</argsstring>
        <name>gpiod_line_get</name>
        <param>
          <type>const char *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Get a GPIO line handle by GPIO chip description and offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>String describing the gpiochip. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO line handle or NULL if an error occurred.</para>
</simplesect>
This routine provides a shorter alternative to calling <ref refid="group__chips_1gaebe2a3810fa09feb734c1395fdd13cb5" kindref="member">gpiod_chip_open_lookup</ref> and <ref refid="group__chips_1gaba9fe5b1cf0c33cd9d7ee911a9c2d4b1" kindref="member">gpiod_chip_get_line</ref>.</para>
<para>If this function succeeds, the caller is responsible for closing the associated GPIO chip. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1594" column="1" declfile="include/gpiod.h" declline="1594" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__line__misc_1gabff68fa33c66b3b9058589d3cc253376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_line_find</definition>
        <argsstring>(const char *name) GPIOD_API</argsstring>
        <name>gpiod_line_find</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a GPIO line by its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the GPIO line handle if the line exists in the system or NULL if it couldn&apos;t be located or an error occurred. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO lines are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name.</para>
</simplesect>
If this routine succeeds, the user must manually close the GPIO chip owning this line to avoid memory leaks. If the line could not be found, this functions sets errno to ENOENT. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1609" column="17" declfile="include/gpiod.h" declline="1609" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__line__misc_1gac15ddf23982a7c156cc9a7b12da90082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_line_close_chip</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_close_chip</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Close a GPIO chip owning this line and release all resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO line object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
After this function returns, the line must no longer be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1617" column="6" declfile="include/gpiod.h" declline="1617" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__line__misc_1gab43e87d2abcab86780a56464d50ecc1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_line_get_chip</definition>
        <argsstring>(struct gpiod_line *line) GPIOD_API</argsstring>
        <name>gpiod_line_get_chip</name>
        <param>
          <type>struct gpiod_line *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Get the handle to the GPIO chip controlling this line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO line object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the GPIO chip handle controlling this line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1624" column="17" declfile="include/gpiod.h" declline="1624" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga183d282b37d7f3768022a4bdd853e020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip_iter *</type>
        <definition>struct gpiod_chip_iter* gpiod_chip_iter_new</definition>
        <argsstring>(void) GPIOD_API</argsstring>
        <name>gpiod_chip_iter_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create a new gpiochip iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to a new chip iterator object or NULL if an error occurred.</para>
</simplesect>
Internally this routine scans the /dev/ directory for GPIO chip device files, opens them and stores their the handles until <ref refid="group__iterators_1ga720e169dee0010a1894fb9dc20b869f5" kindref="member">gpiod_chip_iter_free</ref> or <ref refid="group__iterators_1ga1b03170f6ec33f360b0abf4aeaab9d22" kindref="member">gpiod_chip_iter_free_noclose</ref> is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1646" column="22" declfile="include/gpiod.h" declline="1646" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga720e169dee0010a1894fb9dc20b869f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_chip_iter_free</definition>
        <argsstring>(struct gpiod_chip_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_chip_iter_free</name>
        <param>
          <type>struct gpiod_chip_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Release all resources allocated for the gpiochip iterator and close the most recently opened gpiochip (if any). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The gpiochip iterator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1653" column="6" declfile="include/gpiod.h" declline="1653" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga1b03170f6ec33f360b0abf4aeaab9d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_chip_iter_free_noclose</definition>
        <argsstring>(struct gpiod_chip_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_chip_iter_free_noclose</name>
        <param>
          <type>struct gpiod_chip_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Release all resources allocated for the gpiochip iterator but don&apos;t close the most recently opened gpiochip (if any). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The gpiochip iterator object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Users may want to break the loop when iterating over gpiochips and keep the most recently opened chip active while freeing the iterator data. This routine enables that. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1664" column="6" declfile="include/gpiod.h" declline="1664" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1gaa4d6dd096c1339842321b5575648e481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_iter_next</definition>
        <argsstring>(struct gpiod_chip_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_chip_iter_next</name>
        <param>
          <type>struct gpiod_chip_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Get the next gpiochip handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The gpiochip iterator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the next open gpiochip handle or NULL if no more chips are present in the system. </para>
</simplesect>
<simplesect kind="note"><para>The previous chip handle will be closed using <ref refid="group__iterators_1ga720e169dee0010a1894fb9dc20b869f5" kindref="member">gpiod_chip_iter_free</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1674" column="1" declfile="include/gpiod.h" declline="1674" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga83b13414a8b156cf89a1a2f34c2d10f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_iter_next_noclose</definition>
        <argsstring>(struct gpiod_chip_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_chip_iter_next_noclose</name>
        <param>
          <type>struct gpiod_chip_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Get the next gpiochip handle without closing the previous one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The gpiochip iterator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the next open gpiochip handle or NULL if no more chips are present in the system. </para>
</simplesect>
<simplesect kind="note"><para>This function works just like <ref refid="group__iterators_1gaa4d6dd096c1339842321b5575648e481" kindref="member">gpiod_chip_iter_next</ref> but doesn&apos;t close the most recently opened chip handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1685" column="1" declfile="include/gpiod.h" declline="1685" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga1ba3bd48c6d314a685352126b9781f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line_iter *</type>
        <definition>struct gpiod_line_iter* gpiod_line_iter_new</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_line_iter_new</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Create a new line iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>Active gpiochip handle over the lines of which we want to iterate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New line iterator or NULL if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1724" column="1" declfile="include/gpiod.h" declline="1724" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1ga83403e35c33d994ce8fdf295059fd80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_line_iter_free</definition>
        <argsstring>(struct gpiod_line_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_line_iter_free</name>
        <param>
          <type>struct gpiod_line_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Free all resources associated with a GPIO line iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Line iterator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1730" column="6" declfile="include/gpiod.h" declline="1730" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__iterators_1gaf8b739cfad846a4d28eb3cdb9d821b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_line_iter_next</definition>
        <argsstring>(struct gpiod_line_iter *iter) GPIOD_API</argsstring>
        <name>gpiod_line_iter_next</name>
        <param>
          <type>struct gpiod_line_iter *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Get the next GPIO line handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO line iterator object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the next GPIO line handle or NULL if there are no more lines left. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1739" column="1" declfile="include/gpiod.h" declline="1739" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__misc_1ga94cede78282eab7294ea190b44439b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_version_string</definition>
        <argsstring>(void) GPIOD_API</argsstring>
        <name>gpiod_version_string</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the API version of the library as a human-readable string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Human-readable string containing the library version. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="1765" column="12" declfile="include/gpiod.h" declline="1765" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SPDX-License-Identifier:<sp/>LGPL-2.1-or-later<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>libgpiod.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2017-2018<sp/>Bartosz<sp/>Golaszewski<sp/>&lt;bartekgola@gmail.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LIBGPIOD_GPIOD_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LIBGPIOD_GPIOD_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip_iter;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line_iter;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_API<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((visibility(&quot;default&quot;)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__common_1ga528b9a1ff19b8a79ad6fe30ee083759d" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_UNUSED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_BIT(nr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>(nr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__common_1ga6f92d33a4d978d8f9d416b09643e21bb" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_DEPRECATED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((deprecated))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95" refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bafeefd4fda9adc9dce302d360e94c6684" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bafeefd4fda9adc9dce302d360e94c6684" kindref="member">GPIOD_CTXLESS_FLAG_OPEN_DRAIN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(0),</highlight></codeline>
<codeline lineno="97" refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bad0aaf4c003c1458594d9ee51204e914e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bad0aaf4c003c1458594d9ee51204e914e" kindref="member">GPIOD_CTXLESS_FLAG_OPEN_SOURCE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(1),</highlight></codeline>
<codeline lineno="99" refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bac73a385a0bb0deb79a7cadcb8177c1e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bac73a385a0bb0deb79a7cadcb8177c1e0" kindref="member">GPIOD_CTXLESS_FLAG_BIAS_DISABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(2),</highlight></codeline>
<codeline lineno="101" refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bacbaf6c53ae6216c3af22fe266e9b2f59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55bacbaf6c53ae6216c3af22fe266e9b2f59" kindref="member">GPIOD_CTXLESS_FLAG_BIAS_PULL_DOWN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(3),</highlight></codeline>
<codeline lineno="103" refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55ba18c4abd93567a7202cf97ccce57979ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga06fc87d81c62e9abb8790b6e5713c55ba18c4abd93567a7202cf97ccce57979ae" kindref="member">GPIOD_CTXLESS_FLAG_BIAS_PULL_UP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(4),</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga07eeae27ab2fdddbc88d3ac2fb56f2b4" kindref="member">gpiod_ctxless_get_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gaceb6cafac03115019560b413f8c8a9f9" kindref="member">gpiod_ctxless_get_value_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga3462c2086e0424568dd98273e4aab1c0" kindref="member">gpiod_ctxless_get_value_multiple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gac58f6bf700e80c203f0138e3de5c3c32" kindref="member">gpiod_ctxless_get_value_multiple_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga37b28cb4485662d6915b7967689221e0" kindref="member">gpiod_ctxless_set_value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gaf494539c8485191f7622b10684beb293" kindref="member">gpiod_ctxless_set_value_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga4074f36d8e2e0a6895bd47ad9eac934f" kindref="member">gpiod_ctxless_set_value_multiple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga0c80fa17889f341543041e0b970c41d4" kindref="member">gpiod_ctxless_set_value_multiple_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gae25bc1d06eb06334b2daa3af149fdf74" kindref="member">gpiod_ctxless_set_value_cb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254" refid="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7a778f3f84088ef7e5921c7b4d1c0ebaf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7a778f3f84088ef7e5921c7b4d1c0ebaf2" kindref="member">GPIOD_CTXLESS_EVENT_RISING_EDGE</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="256" refid="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7ad30fcdabed63528589cc82492887879b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggadf764cbdea00d65edcd07bb9953ad2b7ad30fcdabed63528589cc82492887879b" kindref="member">GPIOD_CTXLESS_EVENT_FALLING_EDGE</ref>,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPIOD_CTXLESS_EVENT_BOTH_EDGES,</highlight></codeline>
<codeline lineno="259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="265" refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5abacf1972a00bbca59ae8b2cc85264d85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5abacf1972a00bbca59ae8b2cc85264d85" kindref="member">GPIOD_CTXLESS_EVENT_CB_TIMEOUT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="267" refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ae31b303018125a845a8b04ba1c550b6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ae31b303018125a845a8b04ba1c550b6d" kindref="member">GPIOD_CTXLESS_EVENT_CB_RISING_EDGE</ref>,</highlight></codeline>
<codeline lineno="269" refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ac582a04e90467d92b9e10ab75d97b852" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gga99fb83031ce9923c84392b4e92f956b5ac582a04e90467d92b9e10ab75d97b852" kindref="member">GPIOD_CTXLESS_EVENT_CB_FALLING_EDGE</ref>,</highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="277" refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1157cf8e5aa9668135f86f2623d4c8c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1157cf8e5aa9668135f86f2623d4c8c5" kindref="member">GPIOD_CTXLESS_EVENT_CB_RET_ERR</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="279" refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1b05ae970a4f54029b7173664f9ef309" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a1b05ae970a4f54029b7173664f9ef309" kindref="member">GPIOD_CTXLESS_EVENT_CB_RET_OK</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="281" refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a5f2e5a705e18f1024d436dc60d967f06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggabc6126af1d45847bc59afa0aa3216b04a5f2e5a705e18f1024d436dc60d967f06" kindref="member">GPIOD_CTXLESS_EVENT_CB_RET_STOP</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref>)(int,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="306" refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8116596864f4aa8edaa141c7f3600865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8116596864f4aa8edaa141c7f3600865" kindref="member">GPIOD_CTXLESS_EVENT_POLL_RET_STOP</ref><sp/>=<sp/>-2,</highlight></codeline>
<codeline lineno="308" refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca97c074f23143888e9290411d0eccbdbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca97c074f23143888e9290411d0eccbdbc" kindref="member">GPIOD_CTXLESS_EVENT_POLL_RET_ERR</ref><sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="310" refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8b723031d2ee9c689463bbe2642bf1bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ggadc29c2ff13d900c2f185ee95427fb06ca8b723031d2ee9c689463bbe2642bf1bb" kindref="member">GPIOD_CTXLESS_EVENT_POLL_RET_TIMEOUT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="structgpiod__ctxless__event__poll__fd" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__ctxless__event__poll__fd" kindref="compound">gpiod_ctxless_event_poll_fd</ref><sp/>{</highlight></codeline>
<codeline lineno="318" refid="structgpiod__ctxless__event__poll__fd_1a5e896ddd9f83adeadde54a524b94fe73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__ctxless__event__poll__fd_1a5e896ddd9f83adeadde54a524b94fe73" kindref="member">fd</ref>;</highlight></codeline>
<codeline lineno="320" refid="structgpiod__ctxless__event__poll__fd_1af74f1b269ccaed56aff8f26eb41537b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structgpiod__ctxless__event__poll__fd_1af74f1b269ccaed56aff8f26eb41537b9" kindref="member">event</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref>)(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__ctxless__event__poll__fd" kindref="compound">gpiod_ctxless_event_poll_fd</ref><sp/>*,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga1f69ff2efb6d7793deb97e3e70f695ef" kindref="member">gpiod_ctxless_event_loop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref><sp/><ref refid="group__common_1ga6f92d33a4d978d8f9d416b09643e21bb" kindref="member">GPIOD_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gaeba75a286f90fa851fc96b1c13869208" kindref="member">gpiod_ctxless_event_loop_multiple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lines,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref><sp/><ref refid="group__common_1ga6f92d33a4d978d8f9d416b09643e21bb" kindref="member">GPIOD_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gaf9ee5da5b5d94cbc1de2d20549152899" kindref="member">gpiod_ctxless_event_monitor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_type,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga7f37ae7830c6cc5221d5c44657fa2a73" kindref="member">gpiod_ctxless_event_monitor_ext</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_type,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1ga3ac28eb59bbd31b8b2298f76047d377d" kindref="member">gpiod_ctxless_event_monitor_multiple</ref>(</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_type,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lines,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gaa6c77ae2b0bb3089a662674c4f46d209" kindref="member">gpiod_ctxless_event_monitor_multiple_ext</ref>(</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_type,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lines,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active_low,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1ga76ec2dcc84c9a48543cfff76941a9028" kindref="member">gpiod_ctxless_event_poll_cb</ref><sp/>poll_cb,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__high__level_1gaf417f5cff211fb696a784da5dbd29325" kindref="member">gpiod_ctxless_event_handle_cb</ref><sp/>event_cb,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__high__level_1gab046d9cc1cb930b20b17906846c014ce" kindref="member">gpiod_ctxless_find_line</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*chipname,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chipname_size,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offset)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__chips_1ga1bd8b7231810364c711a14e85e9f3cc7" kindref="member">gpiod_chip_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__chips_1ga9007d4af540eb1ba9f00a837abf340e6" kindref="member">gpiod_chip_open_by_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__chips_1ga6b9dc5d5555b65d5dc262ca2e2623c99" kindref="member">gpiod_chip_open_by_number</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__chips_1ga3464baced5e398540d4ef7eb922c6a7d" kindref="member">gpiod_chip_open_by_label</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__chips_1gaebe2a3810fa09feb734c1395fdd13cb5" kindref="member">gpiod_chip_open_lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*descr)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__chips_1ga3ca9ffa1f217f069651e055889453836" kindref="member">gpiod_chip_close</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__chips_1ga5f7f8de4c5b3439abc27071cab6eaace" kindref="member">gpiod_chip_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__chips_1gafe9676334582b36a17cc045b3502301e" kindref="member">gpiod_chip_label</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__chips_1ga6d468cf051fd763ed392661a0d0895eb" kindref="member">gpiod_chip_num_lines</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><ref refid="group__chips_1gaba9fe5b1cf0c33cd9d7ee911a9c2d4b1" kindref="member">gpiod_chip_get_line</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__chips_1ga699248d90cb511e3c1c77284eef74764" kindref="member">gpiod_chip_get_lines</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*offsets,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_offsets,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__chips_1gabc1d378805b73a93e62048bdbcb31fe3" kindref="member">gpiod_chip_get_all_lines</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><ref refid="group__chips_1ga06c8df980b0218533b29ed2236909e11" kindref="member">gpiod_chip_find_line</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__chips_1gaf36b4461c1c85daf7df8fb34f574f78d" kindref="member">gpiod_chip_find_lines</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**names,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="group__line__bulk_1gad23c9460c53f7177af122ca06934074e" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_LINE_BULK_MAX_LINES<sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="structgpiod__line__bulk" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>{</highlight></codeline>
<codeline lineno="723" refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*<ref refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" kindref="member">lines</ref>[<ref refid="group__line__bulk_1gad23c9460c53f7177af122ca06934074e" kindref="member">GPIOD_LINE_BULK_MAX_LINES</ref>];</highlight></codeline>
<codeline lineno="725" refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">};</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="734" refid="group__line__bulk_1ga27acc32b17cade8b2c22831d41e7d48e" refkind="member"><highlight class="preprocessor">#define<sp/>GPIOD_LINE_BULK_INITIALIZER<sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>NULL<sp/>},<sp/>0<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="group__line__bulk_1gacaedef36df4faba89e19f7dbfab5cfec" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__line__bulk_1gacaedef36df4faba89e19f7dbfab5cfec" kindref="member">gpiod_line_bulk_init</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk-&gt;<ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="group__line__bulk_1gae22ad8a61865e85bf913eb9808aa82bd" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__line__bulk_1gae22ad8a61865e85bf913eb9808aa82bd" kindref="member">gpiod_line_bulk_add</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk-&gt;<ref refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" kindref="member">lines</ref>[bulk-&gt;<ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>++]<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*</highlight></codeline>
<codeline lineno="765" refid="group__line__bulk_1ga5d9bfd50ecc1ec1afbf71f3093a13a9e" refkind="member"><highlight class="normal"><ref refid="group__line__bulk_1ga5d9bfd50ecc1ec1afbf71f3093a13a9e" kindref="member">gpiod_line_bulk_get_line</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bulk-&gt;<ref refid="structgpiod__line__bulk_1a88dd5d063cad2cb6b00fdcdf212ca1eb" kindref="member">lines</ref>[offset];</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="group__line__bulk_1ga32b3bcbf31f23f0f117435dd15312139" refkind="member"><highlight class="normal"><ref refid="group__line__bulk_1ga32b3bcbf31f23f0f117435dd15312139" kindref="member">gpiod_line_bulk_num_lines</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bulk-&gt;<ref refid="structgpiod__line__bulk_1a16a716968d1a7b6bbdf6e66d43807220" kindref="member">num_lines</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="group__line__bulk_1ga636ff9b980d5b02b31876ab909326b57" refkind="member"><highlight class="preprocessor">#define<sp/>gpiod_line_bulk_foreach_line(bulk,<sp/>line,<sp/>lineptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>((lineptr)<sp/>=<sp/>(bulk)-&gt;lines,<sp/>(line)<sp/>=<sp/>*(lineptr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lineptr)<sp/>&lt;=<sp/>(bulk)-&gt;lines<sp/>+<sp/>((bulk)-&gt;num_lines<sp/>-<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lineptr)++,<sp/>(line)<sp/>=<sp/>*(lineptr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="group__line__bulk_1ga464e833758432640ee9aa821715a84a4" refkind="member"><highlight class="preprocessor">#define<sp/>gpiod_line_bulk_foreach_line_off(bulk,<sp/>line,<sp/>offset)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>((offset)<sp/>=<sp/>0,<sp/>(line)<sp/>=<sp/>(bulk)-&gt;lines[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(offset)<sp/>&lt;<sp/>(bulk)-&gt;num_lines;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(offset)++,<sp/>(line)<sp/>=<sp/>(bulk)-&gt;lines[(offset)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="825" refid="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaea3029c9dbc0549f222260ed16f71d1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaea3029c9dbc0549f222260ed16f71d1e" kindref="member">GPIOD_LINE_DIRECTION_INPUT</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="827" refid="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaedcbd6e3c95ae844b1726d4dc3808d18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga61dadd085c1777f559549e05962b2c9eaedcbd6e3c95ae844b1726d4dc3808d18" kindref="member">GPIOD_LINE_DIRECTION_OUTPUT</ref>,</highlight></codeline>
<codeline lineno="829"><highlight class="normal">};</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="835" refid="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635abb89d1cb3a65b37b60fbcfef81661f9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635abb89d1cb3a65b37b60fbcfef81661f9e" kindref="member">GPIOD_LINE_ACTIVE_STATE_HIGH</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="837" refid="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635a210bab3e0ab10c617a48a5fe37df83df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga726ca809ffd3d67ab4b8476646f26635a210bab3e0ab10c617a48a5fe37df83df" kindref="member">GPIOD_LINE_ACTIVE_STATE_LOW</ref>,</highlight></codeline>
<codeline lineno="839"><highlight class="normal">};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="845" refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2daa793aeae9e54c9c91fb0b12dcc428096" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2daa793aeae9e54c9c91fb0b12dcc428096" kindref="member">GPIOD_LINE_BIAS_AS_IS</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="847" refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dabb06ad1d6dbc13b02459b125dd692265" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dabb06ad1d6dbc13b02459b125dd692265" kindref="member">GPIOD_LINE_BIAS_DISABLE</ref>,</highlight></codeline>
<codeline lineno="849" refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dad3a3fcbb53c568bd3376da7c53ff2ff6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dad3a3fcbb53c568bd3376da7c53ff2ff6" kindref="member">GPIOD_LINE_BIAS_PULL_UP</ref>,</highlight></codeline>
<codeline lineno="851" refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dae4f9da6d78cdc9938947739b3b28b9df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__info_1gga0411cd49bb5b71852cecd93bcbf0ca2dae4f9da6d78cdc9938947739b3b28b9df" kindref="member">GPIOD_LINE_BIAS_PULL_DOWN</ref>,</highlight></codeline>
<codeline lineno="853"><highlight class="normal">};</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1ga62168145c7008b82f2f4e0fa7e4b6677" kindref="member">gpiod_line_offset</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__line__info_1ga0caffae9128ca8ce086bdace7706f822" kindref="member">gpiod_line_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__line__info_1gaa2112d86b1270515adf5023652957cd1" kindref="member">gpiod_line_consumer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1gab577fd0d7138c1a82f585477ff2c0139" kindref="member">gpiod_line_direction</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1gabd3dae9b5178655d68310dd8652644fc" kindref="member">gpiod_line_active_state</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1gaa95bdef39ae1abffc7dc41487123de28" kindref="member">gpiod_line_bias</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1ga38347386d5839a2dd7be7e499e1b0b57" kindref="member">gpiod_line_is_used</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1ga49501d4aa72d302748681ffd942895b8" kindref="member">gpiod_line_is_open_drain</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1ga31d102da6befc8b579d7a2c05876b756" kindref="member">gpiod_line_is_open_source</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__info_1ga92863e269a94dc5faade05f5107e33cd" kindref="member">gpiod_line_update</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><ref refid="group__line__info_1gade14511253e8d4d754fe8978607c459c" kindref="member">gpiod_line_needs_update</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref><sp/><ref refid="group__common_1ga6f92d33a4d978d8f9d416b09643e21bb" kindref="member">GPIOD_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="973" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a094a655c1b3896f7d8e078ee6cb461a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a094a655c1b3896f7d8e078ee6cb461a9" kindref="member">GPIOD_LINE_REQUEST_DIRECTION_AS_IS</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="975" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ad6e63a2afc02c0548d2c15e56f3f64ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ad6e63a2afc02c0548d2c15e56f3f64ef" kindref="member">GPIOD_LINE_REQUEST_DIRECTION_INPUT</ref>,</highlight></codeline>
<codeline lineno="977" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a770c3cd9a587b812e00c5caab9b25961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a770c3cd9a587b812e00c5caab9b25961" kindref="member">GPIOD_LINE_REQUEST_DIRECTION_OUTPUT</ref>,</highlight></codeline>
<codeline lineno="979" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a2925bb25d0febefd20d45daccf14c96a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a2925bb25d0febefd20d45daccf14c96a" kindref="member">GPIOD_LINE_REQUEST_EVENT_FALLING_EDGE</ref>,</highlight></codeline>
<codeline lineno="981" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ac3e277e3622e41c7d805b156c2295534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600ac3e277e3622e41c7d805b156c2295534" kindref="member">GPIOD_LINE_REQUEST_EVENT_RISING_EDGE</ref>,</highlight></codeline>
<codeline lineno="983" refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a3b168f7bbfa641443d21af25ccc7ca35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggabed82baf7f470b522273a3e37c24c600a3b168f7bbfa641443d21af25ccc7ca35" kindref="member">GPIOD_LINE_REQUEST_EVENT_BOTH_EDGES</ref>,</highlight></codeline>
<codeline lineno="985"><highlight class="normal">};</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="991" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57aaa6ac96d89df16453322e3ac6b8d74e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57aaa6ac96d89df16453322e3ac6b8d74e7" kindref="member">GPIOD_LINE_REQUEST_FLAG_OPEN_DRAIN</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(0),</highlight></codeline>
<codeline lineno="993" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ab54d1785699976cb9d3c74bdee53f6b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ab54d1785699976cb9d3c74bdee53f6b3" kindref="member">GPIOD_LINE_REQUEST_FLAG_OPEN_SOURCE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(1),</highlight></codeline>
<codeline lineno="995" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ac500ede3c4a86742def54b1113dbf436" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ac500ede3c4a86742def54b1113dbf436" kindref="member">GPIOD_LINE_REQUEST_FLAG_ACTIVE_LOW</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(2),</highlight></codeline>
<codeline lineno="997" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a6e652d8761f2e7e4d7f9dd423e8c7195" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a6e652d8761f2e7e4d7f9dd423e8c7195" kindref="member">GPIOD_LINE_REQUEST_FLAG_BIAS_DISABLE</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(3),</highlight></codeline>
<codeline lineno="999" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ae945cc92de247a56afac968852c8360f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57ae945cc92de247a56afac968852c8360f" kindref="member">GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_DOWN</ref><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(4),</highlight></codeline>
<codeline lineno="1001" refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a7e1cc39360b8e0a84f63ead0943aeee7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__request_1ggab04a0655cd1e3bcac5e8f48c18df1a57a7e1cc39360b8e0a84f63ead0943aeee7" kindref="member">GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_UP</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__common_1gad1bb70753f220c105f0cef3174a060dc" kindref="member">GPIOD_BIT</ref>(5),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008" refid="structgpiod__line__request__config" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__line__request__config" kindref="compound">gpiod_line_request_config</ref><sp/>{</highlight></codeline>
<codeline lineno="1009" refid="structgpiod__line__request__config_1a130194a15629e74cc66c8c6f4b30a00d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structgpiod__line__request__config_1a130194a15629e74cc66c8c6f4b30a00d" kindref="member">consumer</ref>;</highlight></codeline>
<codeline lineno="1011" refid="structgpiod__line__request__config_1a92e3ff6d9a7837006305f33428fa2c71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__request__config_1a92e3ff6d9a7837006305f33428fa2c71" kindref="member">request_type</ref>;</highlight></codeline>
<codeline lineno="1013" refid="structgpiod__line__request__config_1adffbf1e3a4b9a942c8753edbb0c12946" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__request__config_1adffbf1e3a4b9a942c8753edbb0c12946" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gad520fa1a0be91198cffc3d1141847964" kindref="member">gpiod_line_request</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__request__config" kindref="compound">gpiod_line_request_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_val)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gabe6226cb78226fe737eddf99d47eedc7" kindref="member">gpiod_line_request_input</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga303bc402be82ed1bd95b7b72fd1d54fa" kindref="member">gpiod_line_request_output</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_val)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gadd60c323db0e3d492713d6032e155ea1" kindref="member">gpiod_line_request_rising_edge_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gacf49fd94e99b1480db63ccefa38644d7" kindref="member">gpiod_line_request_falling_edge_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga2198ed36422b516d043bb2867621c6bb" kindref="member">gpiod_line_request_both_edges_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gaa4dd1a15015b42fef6266eb42a4ec2de" kindref="member">gpiod_line_request_input_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gaf74984a0b6dddf742a616ae20e304712" kindref="member">gpiod_line_request_output_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>default_val)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gab0002ac08695fd38d7e8f7a14dad34f8" kindref="member">gpiod_line_request_rising_edge_events_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga9261dbe13e0cf6f36cee7bf7f2e9f23f" kindref="member">gpiod_line_request_falling_edge_events_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gaefec58ef5c34cdc6c0cbdefc9b5541b6" kindref="member">gpiod_line_request_both_edges_events_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gac2e36e722e5c15c10fc7f6edf948f1c1" kindref="member">gpiod_line_request_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__request__config" kindref="compound">gpiod_line_request_config</ref><sp/>*config,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*default_vals)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gafd0c43ab707e74b749ea971b0725eb95" kindref="member">gpiod_line_request_bulk_input</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga42d84b2db88f1d1facee58d615d3bb7b" kindref="member">gpiod_line_request_bulk_output</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*default_vals)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga948e2a0627bfce92536dd9c78fdf88c7" kindref="member">gpiod_line_request_bulk_rising_edge_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga6eac4ea5e415b15d0da13c5110fa7266" kindref="member">gpiod_line_request_bulk_falling_edge_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga72788c2e2cf7a631108aec97ee41c1d0" kindref="member">gpiod_line_request_bulk_both_edges_events</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga8e424335311ebdf9a4f23a4009ca3192" kindref="member">gpiod_line_request_bulk_input_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga13b212c9280d4919c697aefa838bcd80" kindref="member">gpiod_line_request_bulk_output_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*default_vals)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gae28e15c99a883d29f97a42c75a099028" kindref="member">gpiod_line_request_bulk_rising_edge_events_flags</ref>(</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga6c82948bab539c2448c08f265fbd62c5" kindref="member">gpiod_line_request_bulk_falling_edge_events_flags</ref>(</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga767334183c16c4ef5b96be5c96d293a8" kindref="member">gpiod_line_request_bulk_both_edges_events_flags</ref>(</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consumer,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga129d28476be19cd8fc75455ea80f5ee1" kindref="member">gpiod_line_release</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga3c224e8b98157d643967150f394273a8" kindref="member">gpiod_line_release_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1ga29a5c43302b6bd678124ad0f06f12c8c" kindref="member">gpiod_line_is_requested</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__line__request_1gad1c150d92f1ba4f5308083218912969f" kindref="member">gpiod_line_is_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__value_1ga44d7e450cc35e92bd4c85b167ca82b84" kindref="member">gpiod_line_get_value</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__value_1ga86ac3339c87991469bbbaa6e3d63f38f" kindref="member">gpiod_line_get_value_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__value_1ga3b9ba90f0f451361657923db0c0a7f5d" kindref="member">gpiod_line_set_value</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__value_1ga9307efacdc06f27cc668831421f86acc" kindref="member">gpiod_line_set_value_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga0fb77dc1a7df831a7d0ab74c04bffdc0" kindref="member">gpiod_line_set_config</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga78a83d1d4a7f040c28783ed91838760d" kindref="member">gpiod_line_set_config_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga4c77815fce3cc4bafc411aed440a27e7" kindref="member">gpiod_line_set_flags</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga4a96c8fd658f0a7c6087879f5ac25ba5" kindref="member">gpiod_line_set_flags_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga4f4d6e13f844bbea19cdc58d81f2c6a9" kindref="member">gpiod_line_set_direction_input</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><ref refid="group__line__config_1ga178050b4b13ae2ce3c42a5cfe35c0795" kindref="member">gpiod_line_set_direction_input_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1gacb95c52a6d6e64e1c7ec37191021df9e" kindref="member">gpiod_line_set_direction_output</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__config_1ga880940f1f8f418f4dde48a20cc581af7" kindref="member">gpiod_line_set_direction_output_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1474" refid="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a73ce2babff38e852bbfeb262e645f4e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a73ce2babff38e852bbfeb262e645f4e8" kindref="member">GPIOD_LINE_EVENT_RISING_EDGE</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1476" refid="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a81feb15310555531fdc8a04ccd2b37d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__line__event_1gga385c44f6fb256e5716a2302a5b940388a81feb15310555531fdc8a04ccd2b37d9" kindref="member">GPIOD_LINE_EVENT_FALLING_EDGE</ref>,</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483" refid="structgpiod__line__event" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref><sp/>{</highlight></codeline>
<codeline lineno="1484" refid="structgpiod__line__event_1adc89d4d45ca870c1699d730300d2634c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/><ref refid="structgpiod__line__event_1adc89d4d45ca870c1699d730300d2634c" kindref="member">ts</ref>;</highlight></codeline>
<codeline lineno="1486" refid="structgpiod__line__event_1a151a8e876ab361d071b56bca03db97fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__event_1a151a8e876ab361d071b56bca03db97fb" kindref="member">event_type</ref>;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1ga8bb899e6b5db351565fa747289dd3c3a" kindref="member">gpiod_line_event_wait</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1gaea68d5fd14d79fa1c4d7984b3ad657f1" kindref="member">gpiod_line_event_wait_bulk</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*bulk,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*timeout,</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref><sp/>*event_bulk)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1gad194091b545d85fbaf4e16e11a760548" kindref="member">gpiod_line_event_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref><sp/>*event)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1gae23c92b7c805dc5c9d99799e6072d610" kindref="member">gpiod_line_event_read_multiple</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line,</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref><sp/>*events,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1ga2cace268d8c54adbe91bfbf4fdab84da" kindref="member">gpiod_line_event_get_fd</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1ga6a4d3fb6908da0f6a48feaaf7adf260f" kindref="member">gpiod_line_event_read_fd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref><sp/>*event)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__line__event_1ga89e92a8666092703217b9a87007e18d3" kindref="member">gpiod_line_event_read_fd_multiple</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structgpiod__line__event" kindref="compound">gpiod_line_event</ref><sp/>*events,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_events)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><ref refid="group__line__misc_1ga3317ddc4f587d46ba45bb2b5800914c7" kindref="member">gpiod_line_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*device,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*<ref refid="group__line__misc_1gabff68fa33c66b3b9058589d3cc253376" kindref="member">gpiod_line_find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__line__misc_1gac15ddf23982a7c156cc9a7b12da90082" kindref="member">gpiod_line_close_chip</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*<ref refid="group__line__misc_1gab43e87d2abcab86780a56464d50ecc1e" kindref="member">gpiod_line_get_chip</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line<sp/>*line)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip_iter<sp/>*<ref refid="group__iterators_1ga183d282b37d7f3768022a4bdd853e020" kindref="member">gpiod_chip_iter_new</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__iterators_1ga720e169dee0010a1894fb9dc20b869f5" kindref="member">gpiod_chip_iter_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__iterators_1ga1b03170f6ec33f360b0abf4aeaab9d22" kindref="member">gpiod_chip_iter_free_noclose</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><ref refid="group__iterators_1gaa4d6dd096c1339842321b5575648e481" kindref="member">gpiod_chip_iter_next</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_chip<sp/>*</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><ref refid="group__iterators_1ga83b13414a8b156cf89a1a2f34c2d10f7" kindref="member">gpiod_chip_iter_next_noclose</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697" refid="group__iterators_1ga9c4bd122b8972636d6c7645be3834f5c" refkind="member"><highlight class="preprocessor">#define<sp/>gpiod_foreach_chip(iter,<sp/>chip)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>((chip)<sp/>=<sp/>gpiod_chip_iter_next(iter);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chip);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chip)<sp/>=<sp/>gpiod_chip_iter_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712" refid="group__iterators_1gabcbe670583cfff4ca4b4ad7be2d25a3b" refkind="member"><highlight class="preprocessor">#define<sp/>gpiod_foreach_chip_noclose(iter,<sp/>chip)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>((chip)<sp/>=<sp/>gpiod_chip_iter_next_noclose(iter);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chip);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1715"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chip)<sp/>=<sp/>gpiod_chip_iter_next_noclose(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line_iter<sp/>*</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><ref refid="group__iterators_1ga1ba3bd48c6d314a685352126b9781f89" kindref="member">gpiod_line_iter_new</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_chip<sp/>*chip)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__iterators_1ga83403e35c33d994ce8fdf295059fd80b" kindref="member">gpiod_line_iter_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gpiod_line<sp/>*</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><ref refid="group__iterators_1gaf8b739cfad846a4d28eb3cdb9d821b79" kindref="member">gpiod_line_iter_next</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>gpiod_line_iter<sp/>*iter)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747" refid="group__iterators_1ga8e16c4290e83b780259896ac6cd1d886" refkind="member"><highlight class="preprocessor">#define<sp/>gpiod_foreach_line(iter,<sp/>line)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>((line)<sp/>=<sp/>gpiod_line_iter_next(iter);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(line);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(line)<sp/>=<sp/>gpiod_line_iter_next(iter))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__misc_1ga94cede78282eab7294ea190b44439b6d" kindref="member">gpiod_version_string</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><ref refid="group__common_1ga21a3297091bbee8cd4829f8a681a085b" kindref="member">GPIOD_API</ref>;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__LIBGPIOD_GPIOD_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/gpiod.h"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__chips" kind="group">
    <compoundname>chips</compoundname>
    <title>GPIO chip operations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__chips_1ga1bd8b7231810364c711a14e85e9f3cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open</definition>
        <argsstring>(const char *path) GPIOD_API</argsstring>
        <name>gpiod_chip_open</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the gpiochip device file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="566" column="17" declfile="include/gpiod.h" declline="566" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga9007d4af540eb1ba9f00a837abf340e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_name</definition>
        <argsstring>(const char *name) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the gpiochip to open. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine appends name to &apos;/dev/&apos; to create the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="575" column="17" declfile="include/gpiod.h" declline="575" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga6b9dc5d5555b65d5dc262ca2e2623c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_number</definition>
        <argsstring>(unsigned int num) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_number</name>
        <param>
          <type>unsigned int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the gpiochip. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine appends num to &apos;/dev/gpiochip&apos; to create the path. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="584" column="17" declfile="include/gpiod.h" declline="584" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga3464baced5e398540d4ef7eb922c6a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_by_label</definition>
        <argsstring>(const char *label) GPIOD_API</argsstring>
        <name>gpiod_chip_open_by_label</name>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip by label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Label of the gpiochip to open. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if the chip with given label was not found or an error occured. </para>
</simplesect>
<simplesect kind="note"><para>If the chip cannot be found but no other error occurred, errno is set to ENOENT. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="594" column="17" declfile="include/gpiod.h" declline="594" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaebe2a3810fa09feb734c1395fdd13cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_chip *</type>
        <definition>struct gpiod_chip* gpiod_chip_open_lookup</definition>
        <argsstring>(const char *descr) GPIOD_API</argsstring>
        <name>gpiod_chip_open_lookup</name>
        <param>
          <type>const char *</type>
          <declname>descr</declname>
        </param>
        <briefdescription>
<para>Open a gpiochip based on the best guess what the path is. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>descr</parametername>
</parameternamelist>
<parameterdescription>
<para>String describing the gpiochip. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GPIO chip handle or NULL if an error occurred.</para>
</simplesect>
This routine tries to figure out whether the user passed it the path to the GPIO chip, its name, label or number as a string. Then it tries to open it using one of the gpiod_chip_open** variants. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="605" column="17" declfile="include/gpiod.h" declline="605" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga3ca9ffa1f217f069651e055889453836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gpiod_chip_close</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_close</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Close a GPIO chip handle and release all allocated resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="611" column="6" declfile="include/gpiod.h" declline="611" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga5f7f8de4c5b3439abc27071cab6eaace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_chip_name</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_name</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the GPIO chip name as represented in the kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a human-readable string containing the chip name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="618" column="12" declfile="include/gpiod.h" declline="618" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gafe9676334582b36a17cc045b3502301e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* gpiod_chip_label</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_label</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the GPIO chip label as represented in the kernel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a human-readable string containing the chip label. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="625" column="12" declfile="include/gpiod.h" declline="625" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga6d468cf051fd763ed392661a0d0895eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int gpiod_chip_num_lines</definition>
        <argsstring>(struct gpiod_chip *chip) GPIOD_API</argsstring>
        <name>gpiod_chip_num_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <briefdescription>
<para>Get the number of GPIO lines exposed by this chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of GPIO lines. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="632" column="14" declfile="include/gpiod.h" declline="632" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaba9fe5b1cf0c33cd9d7ee911a9c2d4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_chip_get_line</definition>
        <argsstring>(struct gpiod_chip *chip, unsigned int offset) GPIOD_API</argsstring>
        <name>gpiod_chip_get_line</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Get the handle to the GPIO line at given offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the GPIO line handle or NULL if an error occured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="641" column="1" declfile="include/gpiod.h" declline="641" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga699248d90cb511e3c1c77284eef74764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_get_lines</definition>
        <argsstring>(struct gpiod_chip *chip, unsigned int *offsets, unsigned int num_offsets, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_get_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_offsets</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Retrieve a set of lines and store them in a line bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of offsets of lines to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of lines to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which to store the line handles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="651" column="5" declfile="include/gpiod.h" declline="651" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gabc1d378805b73a93e62048bdbcb31fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_get_all_lines</definition>
        <argsstring>(struct gpiod_chip *chip, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_get_all_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Retrieve all lines exposed by a chip and store them in a bulk object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which to store the line handles. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="661" column="5" declfile="include/gpiod.h" declline="661" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1ga06c8df980b0218533b29ed2236909e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct gpiod_line *</type>
        <definition>struct gpiod_line* gpiod_chip_find_line</definition>
        <argsstring>(struct gpiod_chip *chip, const char *name) GPIOD_API</argsstring>
        <name>gpiod_chip_find_line</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find a GPIO line by name among lines associated with given GPIO chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the GPIO line. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the GPIO line handle or NULL if the line could not be found or an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>In case a line with given name is not associated with given chip, the function sets errno to ENOENT. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO line names are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="677" column="1" declfile="include/gpiod.h" declline="677" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__chips_1gaf36b4461c1c85daf7df8fb34f574f78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gpiod_chip_find_lines</definition>
        <argsstring>(struct gpiod_chip *chip, const char **names, struct gpiod_line_bulk *bulk) GPIOD_API</argsstring>
        <name>gpiod_chip_find_lines</name>
        <param>
          <type>struct gpiod_chip *</type>
          <declname>chip</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>names</declname>
        </param>
        <param>
          <type>struct <ref refid="structgpiod__line__bulk" kindref="compound">gpiod_line_bulk</ref> *</type>
          <declname>bulk</declname>
        </param>
        <briefdescription>
<para>Find a set of GPIO lines by names among lines exposed by this chip. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chip</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO chip object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>names</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of pointers to C-strings containing the names of the lines to lookup. Must end with a NULL-pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>Line bulk object in which the located lines will be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if all lines were located, -1 on error. </para>
</simplesect>
<simplesect kind="note"><para>If at least one line from the list could not be found among the lines exposed by this chip, the function sets errno to ENOENT. </para>
</simplesect>
<simplesect kind="attention"><para>GPIO line names are not unique in the linux kernel, neither globally nor within a single chip. This function finds the first line with given name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpiod.h" line="692" column="5" declfile="include/gpiod.h" declline="692" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions and data structures dealing with GPIO chips. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
